# =============================================================================
# Git Configuration Environment File - URL-Based PAT Support
# =============================================================================
# 
# This file contains configuration for Git identity and Personal Access Tokens
# for ANY Git hosting service using a flexible URL-based pattern.
#
# SECURITY IMPORTANT:
# - Copy this file to .env and fill in your actual values
# - The .env file should NEVER be committed to version control
# - Keep your Personal Access Tokens secure and rotate them regularly
# - Use tokens with minimal required permissions
#
# =============================================================================

# -----------------------------------------------------------------------------
# Git Identity Configuration
# -----------------------------------------------------------------------------
# These values will be set globally for the user account
# Required for all Git operations

GIT_USER_NAME="Your Full Name"
GIT_USER_EMAIL="your.email@example.com"

# -----------------------------------------------------------------------------
# Git Servers Configuration - URL-Based Pattern
# -----------------------------------------------------------------------------
# Pattern: GIT_SERVER_{UNIQUE_ID}_{FIELD}
# 
# Each Git server needs three variables:
# - GIT_SERVER_{ID}_URL      = The base URL of the Git server
# - GIT_SERVER_{ID}_USERNAME = Your username on that server  
# - GIT_SERVER_{ID}_PAT      = Your Personal Access Token for that server
#
# The {ID} can be any unique identifier you choose (alphanumeric + underscore)
# Examples: GITHUB, GITLAB_MAIN, COMPANY_GITEA, CLIENT_GITLAB, etc.

# -----------------------------------------------------------------------------
# Public Git Hosting Services
# -----------------------------------------------------------------------------

# GitHub.com
GIT_SERVER_GITHUB_URL="https://github.com"
GIT_SERVER_GITHUB_USERNAME="your-github-username"
GIT_SERVER_GITHUB_PAT="ghp_your_github_personal_access_token_here"

# GitLab.com
GIT_SERVER_GITLAB_URL="https://gitlab.com"
GIT_SERVER_GITLAB_USERNAME="your-gitlab-username"
GIT_SERVER_GITLAB_PAT="glpat-your_gitlab_personal_access_token_here"

# Bitbucket.org
GIT_SERVER_BITBUCKET_URL="https://bitbucket.org"
GIT_SERVER_BITBUCKET_USERNAME="your-bitbucket-username"
GIT_SERVER_BITBUCKET_PAT="your_bitbucket_app_password_here"

# -----------------------------------------------------------------------------
# Self-Hosted / Enterprise Git Services
# -----------------------------------------------------------------------------

# Company GitLab Instance
GIT_SERVER_COMPANY_GITLAB_URL="https://gitlab.company.com"
GIT_SERVER_COMPANY_GITLAB_USERNAME="your-company-username"
GIT_SERVER_COMPANY_GITLAB_PAT="glpat-your_company_gitlab_token_here"

# Client GitLab Instance
GIT_SERVER_CLIENT_GITLAB_URL="https://gitlab.client.com"
GIT_SERVER_CLIENT_GITLAB_USERNAME="your-client-username"
GIT_SERVER_CLIENT_GITLAB_PAT="glpat-your_client_gitlab_token_here"

# Company Gitea Server
GIT_SERVER_GITEA_MAIN_URL="https://git.company.com"
GIT_SERVER_GITEA_MAIN_USERNAME="your-gitea-username"
GIT_SERVER_GITEA_MAIN_PAT="your_gitea_personal_access_token_here"

# Partner Gitea Server
GIT_SERVER_GITEA_PARTNER_URL="https://git.partner.com"
GIT_SERVER_GITEA_PARTNER_USERNAME="your-partner-username"
GIT_SERVER_GITEA_PARTNER_PAT="your_partner_gitea_token_here"

# Azure DevOps Organization 1
GIT_SERVER_AZURE_ORG1_URL="https://dev.azure.com/organization1"
GIT_SERVER_AZURE_ORG1_USERNAME="your-azure-username"
GIT_SERVER_AZURE_ORG1_PAT="your_azure_devops_pat_org1_here"

# Azure DevOps Organization 2  
GIT_SERVER_AZURE_ORG2_URL="https://dev.azure.com/organization2"
GIT_SERVER_AZURE_ORG2_USERNAME="your-azure-username"
GIT_SERVER_AZURE_ORG2_PAT="your_azure_devops_pat_org2_here"

# GitHub Enterprise Server
GIT_SERVER_GHE_URL="https://github.company.com"
GIT_SERVER_GHE_USERNAME="your-enterprise-username"
GIT_SERVER_GHE_PAT="ghp_your_github_enterprise_token_here"

# Custom Git Server (cgit, Gitiles, etc.)
GIT_SERVER_CUSTOM1_URL="https://git.custom.com"
GIT_SERVER_CUSTOM1_USERNAME="your-custom-username"
GIT_SERVER_CUSTOM1_PAT="your_custom_git_server_token_here"

# Another Custom Git Server
GIT_SERVER_CUSTOM2_URL="https://code.example.org"
GIT_SERVER_CUSTOM2_USERNAME="your-example-username"
GIT_SERVER_CUSTOM2_PAT="your_example_org_token_here"

# -----------------------------------------------------------------------------
# Advanced Configuration (Optional)
# -----------------------------------------------------------------------------

# Default Git hosting service for SSH URL conversion (if enabled)
# Use the {ID} from your GIT_SERVER_{ID}_URL definitions above
DEFAULT_GIT_SERVICE="GITHUB"

# Enable automatic HTTPS to SSH conversion for the default service
# Set to "true" or "false"
ENABLE_SSH_CONVERSION="false"

# Git signing configuration (optional)
# GIT_SIGNING_KEY="your-gpg-key-id"
# GIT_SIGN_COMMITS="true"

# -----------------------------------------------------------------------------
# Usage Examples
# -----------------------------------------------------------------------------
# 
# With this configuration, you can now work with repositories from any of these
# Git servers seamlessly:
#
# git clone https://github.com/user/repo.git
# git clone https://gitlab.company.com/team/project.git  
# git clone https://git.partner.com/shared/library.git
# git clone https://dev.azure.com/org1/project/_git/repo
#
# The Git Credential Manager will automatically use the appropriate PAT
# based on the repository URL.
#
# -----------------------------------------------------------------------------
# Adding New Git Servers
# -----------------------------------------------------------------------------
#
# To add support for a new Git server, simply add three lines:
#
# GIT_SERVER_NEWSERVER_URL="https://git.newserver.com"
# GIT_SERVER_NEWSERVER_USERNAME="your-username"
# GIT_SERVER_NEWSERVER_PAT="your-token"
#
# The Ansible playbook will automatically detect and configure it!
#
# -----------------------------------------------------------------------------
# Token Permissions Reference
# -----------------------------------------------------------------------------
#
# GitHub Personal Access Token Scopes:
# - repo: Full control of private repositories
# - public_repo: Access public repositories  
# - workflow: Update GitHub Action workflows
# - write:packages: Upload packages to GitHub Package Registry
#
# GitLab Personal Access Token Scopes:
# - read_api: Read access to the API
# - read_repository: Read access to the repository
# - write_repository: Write access to the repository
# - read_registry: Read access to container registry
#
# Azure DevOps Personal Access Token Scopes:
# - Code: Read & write access to code repositories
# - Build: Read & execute build definitions
# - Release: Read, write, & execute release definitions
#
# Bitbucket App Password Permissions:
# - Repositories: Read, Write, Admin
# - Pull requests: Read, Write
# - Issues: Read, Write
#
# Gitea Personal Access Token Scopes:
# - repo: Repository access (read/write)
# - user: User information access
# - admin: Administrative access (if needed)
#
# -----------------------------------------------------------------------------
# MCP Server API Keys Configuration
# -----------------------------------------------------------------------------
# Configuration for Model Context Protocol (MCP) servers used by Claude Code
# These API keys will be automatically configured in the Claude Code MCP setup

# Brave Search API Key (for web search functionality)
BRAVE_API_KEY="your_brave_search_api_key_here"

# Tavily Search API Key (alternative search provider)
TAVILY_API_KEY="your_tavily_api_key_here"

# Kagi Search API Key (premium search service)
KAGI_API_KEY="your_kagi_api_key_here"

# Perplexity API Key (AI-powered search)
PERPLEXITY_API_KEY="your_perplexity_api_key_here"

# Jina AI API Key (embeddings and search)
JINA_AI_API_KEY="your_jina_ai_api_key_here"

# Upstash Redis configuration (for Context7 MCP server)
UPSTASH_REDIS_REST_URL="https://your-redis-url.upstash.io"
UPSTASH_REDIS_REST_TOKEN="your_upstash_redis_token_here"

# OpenAI API Key (if using OpenAI-based MCP servers)
OPENAI_API_KEY="sk-your_openai_api_key_here"

# Anthropic API Key (for Claude API access)
ANTHROPIC_API_KEY="sk-ant-your_anthropic_api_key_here"

# =============================================================================
# Security Best Practices:
# =============================================================================
# 1. Use tokens with minimal required permissions for each service
# 2. Set expiration dates on tokens (90 days recommended)
# 3. Rotate tokens regularly across all services
# 4. Never share tokens or commit them to repositories
# 5. Use different tokens for different purposes/environments
# 6. Monitor token usage in each Git hosting service
# 7. Revoke tokens immediately if compromised
# 8. Use organization-specific tokens when working with teams
# 9. Consider using SSH keys for services that support them well
# 10. Keep a secure backup of token information for recovery
# 11. MCP API keys should follow the same security practices as Git tokens
# 12. Monitor MCP server usage and API consumption in respective dashboards
# =============================================================================