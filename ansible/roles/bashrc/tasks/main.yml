---
# bashrc role tasks - Enhanced shell integrations

- name: Get target user information
  getent:
    database: passwd
    key: "{{ target_user }}"
  register: user_info
  tags:
    - bashrc

- name: Set target user home directory
  set_fact:
    target_user_home: "{{ user_info.ansible_facts.getent_passwd[target_user][4] }}"
  tags:
    - bashrc

- name: Ensure .bashrc exists
  file:
    path: "{{ target_user_home }}/.bashrc"
    state: touch
    owner: "{{ target_user }}"
    group: "{{ target_user }}"
    mode: '0644'
  tags:
    - bashrc

- name: Add Claude Code VM bashrc header
  blockinfile:
    path: "{{ target_user_home }}/.bashrc"
    marker: "# {mark} CLAUDE CODE VM INTEGRATIONS"
    create: true
    owner: "{{ target_user }}"
    group: "{{ target_user }}"
    block: |
      # Enhanced shell integrations for Claude Code VM deployment
      # Generated by Ansible bashrc role
    state: present
  when: enable_bashrc_integrations
  tags:
    - bashrc

- name: Add Docker aliases
  blockinfile:
    path: "{{ target_user_home }}/.bashrc"
    marker: "# {mark} DOCKER ALIASES"
    create: true
    owner: "{{ target_user }}"
    group: "{{ target_user }}"
    block: |
      # Docker aliases for productivity
      {% for alias_item in docker_aliases %}
      alias {{ alias_item.alias }}='{{ alias_item.command }}'
      {% endfor %}
    state: present
  when: enable_bashrc_integrations and enable_docker_aliases
  tags:
    - bashrc
    - docker

- name: Add Kubernetes aliases
  blockinfile:
    path: "{{ target_user_home }}/.bashrc"
    marker: "# {mark} KUBERNETES ALIASES"
    create: true
    owner: "{{ target_user }}"
    group: "{{ target_user }}"
    block: |
      # Kubernetes aliases for productivity
      {% for alias_item in kubernetes_aliases %}
      alias {{ alias_item.alias }}='{{ alias_item.command }}'
      {% endfor %}
    state: present
  when: enable_bashrc_integrations and enable_kubectl_completions
  tags:
    - bashrc
    - kubernetes

- name: Add development aliases
  blockinfile:
    path: "{{ target_user_home }}/.bashrc"
    marker: "# {mark} DEVELOPMENT ALIASES"
    create: true
    owner: "{{ target_user }}"
    group: "{{ target_user }}"
    block: |
      # Development aliases for productivity
      {% for alias_item in dev_aliases %}
      alias {{ alias_item.alias }}='{{ alias_item.command }}'
      {% endfor %}
    state: present
  when: enable_bashrc_integrations and enable_dev_aliases
  tags:
    - bashrc
    - development

- name: Add kubectl completion
  blockinfile:
    path: "{{ target_user_home }}/.bashrc"
    marker: "# {mark} KUBECTL COMPLETION"
    create: true
    owner: "{{ target_user }}"
    group: "{{ target_user }}"
    block: |
      # kubectl completion
      if command -v kubectl &> /dev/null; then
        source <(kubectl completion bash)
        complete -o default -F __start_kubectl k  # Enable completion for 'k' alias
      fi
    state: present
  when: enable_bashrc_integrations and enable_kubectl_completions
  tags:
    - bashrc
    - kubernetes

- name: Add Docker completion
  blockinfile:
    path: "{{ target_user_home }}/.bashrc"
    marker: "# {mark} DOCKER COMPLETION"
    create: true
    owner: "{{ target_user }}"
    group: "{{ target_user }}"
    block: |
      # Docker completion (if available)
      if [ -f /usr/share/bash-completion/completions/docker ]; then
        source /usr/share/bash-completion/completions/docker
      fi
    state: present
  when: enable_bashrc_integrations and enable_docker_completions
  tags:
    - bashrc
    - docker

- name: Add custom functions
  blockinfile:
    path: "{{ target_user_home }}/.bashrc"
    marker: "# {mark} CUSTOM FUNCTIONS"
    create: true
    owner: "{{ target_user }}"
    group: "{{ target_user }}"
    block: |
      # Custom functions for enhanced productivity
      
      # Quick Docker container management
      drun() {
        if [ $# -eq 0 ]; then
          echo "Usage: drun <image> [command]"
          return 1
        fi
        docker run -it --rm "$@"
      }
      
      # Quick kubectl context switching
      kctx() {
        if [ $# -eq 0 ]; then
          kubectl config get-contexts
        else
          kubectl config use-context "$1"
        fi
      }
      
      # Quick namespace switching
      kns() {
        if [ $# -eq 0 ]; then
          kubectl get namespaces
        else
          kubectl config set-context --current --namespace="$1"
        fi
      }
      
      # Enhanced cd with automatic ls
      cdls() {
        cd "$1" && ls -la
      }
      
      # Quick file search
      ff() {
        find . -type f -name "*$1*" 2>/dev/null
      }
    state: present
  when: enable_bashrc_integrations and enable_custom_functions
  tags:
    - bashrc
    - functions

- name: Display bashrc integration status
  debug:
    msg:
      - "=== Bashrc Integrations Applied ==="
      - "Docker aliases: {{ 'enabled' if enable_docker_aliases else 'disabled' }}"
      - "Kubernetes aliases: {{ 'enabled' if enable_kubectl_completions else 'disabled' }}"
      - "Development aliases: {{ 'enabled' if enable_dev_aliases else 'disabled' }}"
      - "Custom functions: {{ 'enabled' if enable_custom_functions else 'disabled' }}"
      - "Configuration file: {{ target_user_home }}/.bashrc"
      - "Note: Run 'source ~/.bashrc' or start a new shell to apply changes"
  when: enable_bashrc_integrations
  tags:
    - bashrc