---
# Common role tasks - System preparation and essential packages

- name: Get target user information
  getent:
    database: passwd
    key: "{{ target_user }}"
  register: common_user_info
  tags:
    - system
    - user-setup

- name: Set target user home directory
  set_fact:
    target_user_home: "{{ common_user_info.ansible_facts.getent_passwd[target_user][4] }}"
  tags:
    - system
    - user-setup

- name: Check and fix /tmp directory permissions
  shell: |
    current_perms=$(stat -c "%a" /tmp)
    echo "Current /tmp permissions: $current_perms"
    
    if [ "$current_perms" != "1777" ]; then
      echo "Fixing /tmp permissions from $current_perms to 1777"
      chmod 1777 /tmp
      chown root:root /tmp
      echo "Fixed: /tmp permissions set to 1777"
    else
      echo "OK: /tmp permissions already correct (1777)"
    fi
  become: true
  register: tmp_permission_fix
  changed_when: "'Fixing /tmp permissions' in tmp_permission_fix.stdout"
  tags:
    - system
    - prerequisites

- name: Display /tmp permission status
  debug:
    msg: "{{ tmp_permission_fix.stdout_lines }}"
  tags:
    - system
    - prerequisites

- name: Test /tmp write permissions for APT
  shell: |
    # Test if current user can create temp files in /tmp
    test_file="/tmp/apt_test_$$"
    if touch "$test_file" 2>/dev/null; then
      rm -f "$test_file"
      echo "SUCCESS: /tmp is writable"
    else
      echo "ERROR: /tmp is not writable"
      exit 1
    fi
  register: tmp_write_test
  changed_when: false
  tags:
    - system
    - prerequisites

- name: Create keyrings directory for third-party repositories
  file:
    path: /etc/apt/keyrings
    state: directory
    mode: '0755'
  become: true
  tags:
    - system
    - prerequisites

- name: Wait for package manager to become available
  shell: |
    for i in {1..10}; do
      # Check if any apt/dpkg processes are running
      if pgrep -f "apt|dpkg|unattended-upgrade" > /dev/null; then
        echo "Package manager busy, waiting... (attempt $i/10)"
        sleep 3
        continue
      fi
      
      # Check for lock files using fuser
      if fuser /var/lib/dpkg/lock-frontend >/dev/null 2>&1 || \
         fuser /var/lib/apt/lists/lock >/dev/null 2>&1; then
        echo "Package manager busy, waiting... (attempt $i/10)"
        sleep 3
        continue
      fi
      
      echo "Package manager available"
      exit 0
    done
    echo "Package manager still busy after 30 seconds, proceeding anyway"
    exit 0
  register: package_lock_wait_locales
  changed_when: false
  tags:
    - system
    - locale

- name: Install locales package
  apt:
    name: locales
    state: present
    update_cache: true
  become: true
  retries: "{{ package_install_retries | default(3) }}"
  delay: "{{ package_install_delay | default(10) }}"
  tags:
    - system
    - locale

- name: Generate locales
  locale_gen:
    name: "{{ item }}"
    state: present
  become: true
  loop:
    - en_US.UTF-8
    - C.UTF-8
  tags:
    - system
    - locale

- name: Set system locale to C.UTF-8
  copy:
    content: |
      LANG=C.UTF-8
      LC_ALL=C.UTF-8
    dest: /etc/default/locale
    owner: root
    group: root
    mode: '0644'
  become: true
  tags:
    - system
    - locale

- name: Update apt cache
  apt:
    update_cache: true
    cache_valid_time: "{{ cache_valid_time }}"
  retries: 3
  delay: "{{ package_manager_check_interval | default(5) }}"
  tags:
    - system
    - packages

- name: Wait for package manager to become available
  shell: |
    max_wait={{ package_manager_max_wait_seconds }}
    check_interval={{ package_manager_check_interval }}
    max_attempts=$((max_wait / check_interval))
    attempt=0
    
    while [ $attempt -lt $max_attempts ]; do
      # Check if any apt/dpkg processes are running
      if pgrep -f "apt|dpkg|unattended-upgrade" > /dev/null; then
        echo "Package manager busy, waiting... (attempt $((attempt + 1))/$max_attempts)"
        sleep $check_interval
        attempt=$((attempt + 1))
        continue
      fi
      
      # Check for lock files using fuser (more reliable)
      if fuser /var/lib/dpkg/lock-frontend >/dev/null 2>&1 || \
         fuser /var/lib/apt/lists/lock >/dev/null 2>&1 || \
         fuser /var/cache/apt/archives/lock >/dev/null 2>&1; then
        echo "Package manager busy, waiting... (attempt $((attempt + 1))/$max_attempts)"
        sleep $check_interval
        attempt=$((attempt + 1))
        continue
      fi
      
      echo "Package manager is clear"
      exit 0
    done
    echo "Package manager still busy after ${max_wait} seconds, proceeding anyway"
  register: package_manager_wait
  changed_when: false
  tags:
    - system
    - packages

- name: Display package manager status
  debug:
    msg: "{{ package_manager_wait.stdout_lines }}"
  when: package_manager_wait.stdout_lines is defined
  tags:
    - system
    - packages

- name: Upgrade existing packages
  apt:
    upgrade: "{{ upgrade_packages }}"
    update_cache: false
  when: upgrade_packages is defined and upgrade_packages != false
  retries: 3
  delay: "{{ package_manager_retry_delay | default(30) }}"
  register: upgrade_result
  failed_when: false
  tags:
    - system
    - packages
    - upgrade

- name: Handle package upgrade failure
  fail:
    msg:
      - "❌ Package upgrade failed after 3 attempts"
      - "Common causes:"
      - "- Another package manager process is running (apt/dpkg/unattended-upgrade)"
      - "- Package repository issues"
      - "- Insufficient disk space"
      - ""
      - "💡 Troubleshooting steps:"
      - "1. Check active processes: sudo pgrep -f 'apt|dpkg|unattended-upgrade'"
      - "2. Wait for processes to finish or kill them: sudo pkill unattended-upgrade"
      - "3. Check disk space: df -h"
      - "4. Try manual update: sudo apt update && sudo apt upgrade"
      - ""
      - "🔧 To skip package upgrades, set: upgrade_packages=false"
  when: 
    - upgrade_packages is defined and upgrade_packages != false
    - upgrade_result is defined
    - upgrade_result.failed | default(false)
  tags:
    - system
    - packages
    - upgrade

- name: Install essential packages
  apt:
    name: "{{ essential_packages }}"
    state: present
    update_cache: false
  retries: 3
  delay: "{{ package_upgrade_delay | default(10) }}"
  tags:
    - system
    - packages

- name: Install optional packages
  apt:
    name: "{{ optional_packages }}"
    state: present
  when: optional_packages is defined and optional_packages | length > 0
  tags:
    - system
    - packages
    - optional

- name: Create user directories for global npm packages
  file:
    path: "{{ target_user_home }}/.npm-global"
    state: directory
    owner: "{{ target_user }}"
    group: "{{ target_user }}"
    mode: '0755'
  tags:
    - system
    - npm-prep

- name: Configure timezone
  timezone:
    name: "{{ timezone }}"
  when: configure_timezone
  tags:
    - system
    - timezone

- name: Remove unused packages
  apt:
    autoremove: true
  when: autoremove_packages
  tags:
    - cleanup

- name: Clean apt cache
  apt:
    autoclean: true
  when: remove_unused_packages
  tags:
    - cleanup

- name: Install screen for persistent sessions
  apt:
    name: screen
    state: present
  tags:
    - system
    - screen

- name: Get target user home directory for screen setup
  getent:
    database: passwd
    key: "{{ target_user }}"
  register: screen_user_info
  tags:
    - screen
    - session-management

- name: Ensure scripts directory exists
  file:
    path: "{{ scripts_dir }}"
    state: directory
    owner: "{{ target_user }}"
    group: "{{ target_user }}"
    mode: '0755'
  tags:
    - screen
    - session-management
    - directory-setup

- name: Deploy connect-session script for automatic screen attachment
  template:
    src: connect-session.sh.j2
    dest: "{{ scripts_dir }}/connect-session.sh"
    owner: "{{ target_user }}"
    group: "{{ target_user }}"
    mode: '0755'
  tags:
    - screen
    - session-management

- name: Add automatic screen session attachment to .bashrc
  blockinfile:
    path: "{{ target_user_home }}/.bashrc"
    block: |
      # Auto-attach to screen session for SSH connections
      if [[ -n "$SSH_CONNECTION" ]] && [[ -z "$STY" ]] && [[ -z "$TMUX" ]]; then
          {{ scripts_dir }}/connect-session.sh
      fi
    marker: "# {mark} ANSIBLE MANAGED BLOCK - Screen Session Management"
    create: true
    owner: "{{ target_user }}"
    group: "{{ target_user }}"
    mode: '0644'
  tags:
    - screen
    - session-management

- name: Create screen logs directory
  file:
    path: "{{ screen_logs_dir }}"
    state: directory
    owner: "{{ target_user }}"
    group: "{{ target_user }}"
    mode: '0755'
  tags:
    - screen
    - session-management

- name: Gather system facts for validation
  setup:
    gather_subset:
      - "!all"
      - "min"
      - "network"
      - "virtual"
  tags:
    - validation