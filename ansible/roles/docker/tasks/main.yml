---
# Docker role tasks - Install Docker CE and Docker Compose plugin

- name: Remove conflicting Docker packages
  apt:
    name: "{{ docker_conflicting_packages }}"
    state: absent
    purge: true
  tags:
    - docker
    - cleanup

- name: Create keyrings directory
  file:
    path: /etc/apt/keyrings
    state: directory
    mode: '0755'
  tags:
    - docker
    - setup

- name: Download and install Docker GPG key (official method)
  shell: |
    curl -fsSL {{ docker_gpg_key_url }} -o {{ docker_gpg_key_path }}
    chmod a+r {{ docker_gpg_key_path }}
  args:
    creates: "{{ docker_gpg_key_path }}"
  register: docker_gpg_key
  tags:
    - docker
    - repository

- name: Get correct architecture for Docker repository
  shell: dpkg --print-architecture
  register: docker_arch
  changed_when: false

- name: Set Docker architecture with fallback
  set_fact:
    docker_architecture: "{{ docker_arch.stdout | default(ansible_architecture | replace('x86_64', 'amd64')) }}"

- name: Install python3-debian for repository management
  apt:
    name: python3-debian
    state: present
    update_cache: true
  tags:
    - docker
    - prerequisites

- name: Add Docker repository (modern Debian 12 method)
  ansible.builtin.deb822_repository:
    name: docker
    types: [deb]
    uris: ["{{ docker_repo_url }}"]
    suites: ["{{ ansible_distribution_release }}"]
    components: [stable]
    architectures: ["{{ docker_architecture }}"]
    signed_by: "{{ docker_gpg_key_path }}"
    state: present
  tags:
    - docker
    - repository

- name: Update apt cache after adding Docker repository
  apt:
    update_cache: true
    cache_valid_time: 0
  tags:
    - docker
    - repository

- name: Install Docker packages
  apt:
    name: "{{ docker_packages }}"
    state: present
    update_cache: true
  register: docker_installation
  until: docker_installation is succeeded
  retries: 3
  delay: 10
  tags:
    - docker
    - packages

- name: Create Docker daemon configuration directory
  file:
    path: /etc/docker
    state: directory
    mode: '0755'
  tags:
    - docker
    - configuration

- name: Configure Docker daemon
  copy:
    content: "{{ docker_daemon_config | to_nice_json }}"
    dest: /etc/docker/daemon.json
    mode: '0644'
  notify: restart docker
  when: docker_daemon_config is defined and docker_daemon_config | length > 0
  tags:
    - docker
    - configuration

- name: Start and enable Docker services
  systemd:
    name: "{{ item }}"
    state: started
    enabled: true
    daemon_reload: true
  loop: "{{ docker_services }}"
  tags:
    - docker
    - services

- name: Create docker group
  group:
    name: docker
    state: present
  tags:
    - docker
    - users

- name: Set docker users list (include target_user automatically)
  set_fact:
    effective_docker_users: "{{ (docker_users | default([])) + [target_user] if target_user is defined else (docker_users | default([])) }}"
  tags:
    - docker
    - users

- name: Add users to docker group
  user:
    name: "{{ item }}"
    groups: docker
    append: true
  loop: "{{ effective_docker_users | unique }}"
  when: add_users_to_docker_group and effective_docker_users | length > 0
  notify: notify user of group change
  tags:
    - docker
    - users

- name: Validate Docker installation
  block:
    - name: Check Docker daemon status
      systemd:
        name: docker
      register: docker_service_status

    - name: Verify Docker version
      command: docker --version
      register: docker_version
      changed_when: false

    - name: Verify Docker Compose plugin
      command: docker compose version
      register: docker_compose_version
      changed_when: false

    - name: Display Docker versions
      debug:
        msg: 
          - "Docker: {{ docker_version.stdout }}"
          - "Docker Compose: {{ docker_compose_version.stdout }}"
          - "Service Status: {{ docker_service_status.status.ActiveState }}"

    - name: Test Docker functionality (as root - group membership requires logout/login)
      command: docker run --rm hello-world
      register: docker_test
      changed_when: false
      # Note: Cannot test as target user during installation due to group activation timing

    - name: Verify users were added to docker group
      command: groups {{ item }}
      register: user_group_check
      loop: "{{ effective_docker_users }}"
      when: effective_docker_users | length > 0
      changed_when: false
      failed_when: false

    - name: Display group membership verification
      debug:
        msg: "✓ User {{ item.item }} groups: {{ item.stdout }}"
      loop: "{{ user_group_check.results }}"
      when: user_group_check is defined and effective_docker_users | length > 0

    - name: Display critical Docker group membership notice
      debug:
        msg:
          - "⚠️  IMPORTANT: DOCKER GROUP MEMBERSHIP REQUIRES LOGOUT/LOGIN ⚠️"
          - ""
          - "Docker has been installed and configured correctly, but you must:"
          - "1. Log out of your current session completely"
          - "2. Log back in to activate docker group membership"
          - "3. Verify with: groups | grep docker"
          - "4. Test with: docker run --rm hello-world"
          - ""
          - "Until you logout/login, Docker will require sudo for this user."
      when: effective_docker_users | length > 0

  when: validate_installation
  tags:
    - docker
    - validation