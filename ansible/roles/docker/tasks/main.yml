---
# Docker role tasks - Install Docker CE using official method for Debian 12

- name: Check if Docker is already installed
  command: docker --version
  register: docker_check
  failed_when: false
  changed_when: false
  tags:
    - docker
    - check

- name: Check Docker service status
  systemd:
    name: docker
  register: docker_service_check
  failed_when: false
  tags:
    - docker
    - check

- name: Set Docker installation status
  set_fact:
    docker_installed: "{{ docker_check.rc == 0 and docker_service_check.status is defined }}"

- name: Docker installation block
  block:
    - name: Remove conflicting Docker packages
      apt:
        name: "{{ docker_conflicting_packages }}"
        state: absent
        purge: true
      retries: "{{ docker_install_retries | default(3) }}"
      delay: "{{ docker_install_delay | default(10) }}"
      until: conflicting_packages_result is succeeded
      register: conflicting_packages_result
      tags:
        - docker
        - cleanup

    - name: Install prerequisite packages for Docker
      apt:
        name:
          - ca-certificates
          - curl
          - gnupg
          - lsb-release
          - python3-debian
        state: present
        update_cache: true
        cache_valid_time: 3600
      retries: "{{ docker_install_retries | default(3) }}"
      delay: "{{ docker_install_delay | default(10) }}"
      until: prereq_result is succeeded
      register: prereq_result
      tags:
        - docker
        - prerequisites

    - name: Create keyrings directory
      file:
        path: /etc/apt/keyrings
        state: directory
        mode: '0755'
      tags:
        - docker
        - setup

    - name: Download Docker GPG key (exact Docker documentation method)
      shell: |
        curl -fsSL {{ docker_gpg_key_url }} -o {{ docker_gpg_key_path }}
        chmod a+r {{ docker_gpg_key_path }}
      args:
        creates: "{{ docker_gpg_key_path }}"
      retries: "{{ docker_install_retries | default(3) }}"
      delay: "{{ docker_install_delay | default(10) }}"
      tags:
        - docker
        - repository

    - name: Add Docker repository (exact Docker documentation method)
      shell: |
        echo "deb [arch=$(dpkg --print-architecture) signed-by={{ docker_gpg_key_path }}] {{ docker_repo_url }} {{ ansible_distribution_release }} stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null
      args:
        creates: /etc/apt/sources.list.d/docker.list
      tags:
        - docker
        - repository

    - name: Update apt cache after adding Docker repository
      apt:
        update_cache: true
        cache_valid_time: 0
      tags:
        - docker
        - repository

    - name: Install Docker packages
      apt:
        name: "{{ docker_packages }}"
        state: present
        update_cache: true
      retries: "{{ docker_install_retries | default(3) }}"
      delay: "{{ docker_install_delay | default(10) }}"
      until: docker_install_result is succeeded
      register: docker_install_result
      notify: restart docker
      tags:
        - docker
        - packages

  when: not docker_installed

- name: Create Docker daemon configuration directory
  file:
    path: /etc/docker
    state: directory
    mode: '0755'
  tags:
    - docker
    - configuration

- name: Configure Docker daemon
  copy:
    content: "{{ docker_daemon_config | to_nice_json }}"
    dest: /etc/docker/daemon.json
    mode: '0644'
  notify: restart docker
  when: docker_daemon_config is defined and docker_daemon_config | length > 0
  tags:
    - docker
    - configuration

- name: Start and enable Docker services
  systemd:
    name: "{{ item }}"
    state: started
    enabled: true
    daemon_reload: true
  loop: "{{ docker_services }}"
  tags:
    - docker
    - services

- name: Create docker group
  group:
    name: docker
    state: present
  tags:
    - docker
    - users

- name: Set docker users list (include target_user automatically)
  set_fact:
    effective_docker_users: "{{ (docker_users | default([])) + [target_user] if target_user is defined else (docker_users | default([])) }}"
  tags:
    - docker
    - users

- name: Add users to docker group
  user:
    name: "{{ item }}"
    groups: docker
    append: true
  loop: "{{ effective_docker_users | unique }}"
  when: add_users_to_docker_group and effective_docker_users | length > 0
  notify: notify user of group change
  tags:
    - docker
    - users

- name: Validate Docker installation
  block:
    - name: Check Docker daemon status
      systemd:
        name: docker
      register: docker_service_status

    - name: Verify Docker version
      command: docker --version
      register: docker_version
      changed_when: false

    - name: Verify Docker Compose plugin
      command: docker compose version
      register: docker_compose_version
      changed_when: false

    - name: Display Docker versions
      debug:
        msg: 
          - "Docker: {{ docker_version.stdout }}"
          - "Docker Compose: {{ docker_compose_version.stdout }}"
          - "Service Status: {{ docker_service_status.status.ActiveState }}"

    - name: Test Docker functionality (as root)
      command: docker run --rm hello-world
      register: docker_test
      changed_when: false

    - name: Verify users were added to docker group
      command: groups {{ item }}
      register: user_group_check
      loop: "{{ effective_docker_users }}"
      when: effective_docker_users | length > 0
      changed_when: false
      failed_when: false

    - name: Display group membership verification
      debug:
        msg: "✓ User {{ item.item }} groups: {{ item.stdout }}"
      loop: "{{ user_group_check.results }}"
      when: user_group_check is defined and effective_docker_users | length > 0

    - name: Display critical Docker group membership notice
      debug:
        msg:
          - "⚠️  IMPORTANT: DOCKER GROUP MEMBERSHIP REQUIRES LOGOUT/LOGIN ⚠️"
          - ""
          - "Docker has been installed and configured correctly, but you must:"
          - "1. Log out of your current session completely"
          - "2. Log back in to activate docker group membership"
          - "3. Verify with: groups | grep docker"
          - "4. Test with: docker run --rm hello-world"
          - ""
          - "Until you logout/login, Docker will require sudo for this user."
      when: effective_docker_users | length > 0

  when: validate_installation
  tags:
    - docker
    - validation