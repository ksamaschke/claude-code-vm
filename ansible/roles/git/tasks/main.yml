---
# Git role tasks - Install Git and configure credential providers with URL-based PAT support

- name: Check if Git is already installed
  command: git --version
  register: git_check
  failed_when: false
  changed_when: false
  tags:
    - git
    - packages

- name: Install Git and dependencies
  apt:
    name:
      - git
      - curl
      - ca-certificates
      - gnupg
    state: present
    update_cache: true
  when: git_check.rc != 0
  become: true
  tags:
    - git
    - packages

# Environment file handling with URL-based PAT discovery
- name: Check for .env file
  stat:
    path: "{{ custom_git_config_file | default(env_file_path) }}"
  register: env_file_stat
  delegate_to: localhost
  become: false
  when: use_env_file or custom_git_config_file is defined
  tags:
    - git
    - env-file

- name: Discover Git servers from .env file
  shell: |
    if [ -f "{{ custom_git_config_file | default(env_file_path) }}" ]; then
      # Load environment variables
      export $(grep -v '^#' "{{ custom_git_config_file | default(env_file_path) }}" | grep -v '^$' | xargs)
      
      # Build JSON output
      echo "{"
      echo "  \"git_user_name\": \"${GIT_USER_NAME:-}\","
      echo "  \"git_user_email\": \"${GIT_USER_EMAIL:-}\","
      echo "  \"default_git_service\": \"${DEFAULT_GIT_SERVICE:-GITHUB}\","
      echo "  \"enable_ssh_conversion\": \"${ENABLE_SSH_CONVERSION:-false}\","
      echo "  \"git_signing_key\": \"${GIT_SIGNING_KEY:-}\","
      echo "  \"git_sign_commits\": \"${GIT_SIGN_COMMITS:-false}\","
      echo "  \"git_servers\": ["
      
      first=true
      
      # Handle well-known providers (GitHub, GitLab)
      if [ -n "${GITHUB_USERNAME:-}" ] && [ -n "${GITHUB_PAT:-}" ]; then
        if [ "$first" = true ]; then first=false; else echo ","; fi
        echo "    {"
        echo "      \"id\": \"GITHUB\","
        echo "      \"url\": \"https://github.com\","
        echo "      \"username\": \"${GITHUB_USERNAME}\","
        echo "      \"pat\": \"${GITHUB_PAT}\","
        echo "      \"host\": \"github.com\""
        printf "    }"
      fi
      
      if [ -n "${GITLAB_USERNAME:-}" ] && [ -n "${GITLAB_PAT:-}" ]; then
        if [ "$first" = true ]; then first=false; else echo ","; fi
        echo "    {"
        echo "      \"id\": \"GITLAB\","
        echo "      \"url\": \"https://gitlab.com\","
        echo "      \"username\": \"${GITLAB_USERNAME}\","
        echo "      \"pat\": \"${GITLAB_PAT}\","
        echo "      \"host\": \"gitlab.com\""
        printf "    }"
      fi
      
      # Handle custom Git servers (GIT_*_URL pattern)
      server_ids=$(grep '^GIT_[A-Z0-9_]*_URL=' "{{ env_file_path }}" | sed 's/GIT_//g' | sed 's/_URL=.*//g' | sort -u)
      
      for server_id in $server_ids; do
        # Get variables for this server
        url_var="GIT_${server_id}_URL"
        username_var="GIT_${server_id}_USERNAME"
        pat_var="GIT_${server_id}_PAT"
        
        url=$(eval echo \$${url_var})
        username=$(eval echo \$${username_var})
        pat=$(eval echo \$${pat_var})
        
        # Only add if all required fields are present
        if [ -n "$url" ] && [ -n "$username" ] && [ -n "$pat" ]; then
          if [ "$first" = true ]; then first=false; else echo ","; fi
          echo "    {"
          echo "      \"id\": \"${server_id}\","
          echo "      \"url\": \"${url}\","
          echo "      \"username\": \"${username}\","
          echo "      \"pat\": \"${pat}\","
          echo "      \"host\": \"$(echo ${url} | sed 's|^https\?://||' | sed 's|/.*||')\""
          printf "    }"
        fi
      done
      
      echo ""
      echo "  ]"
      echo "}"
    else
      echo '{"git_servers": []}'
    fi
  register: env_vars_result
  delegate_to: localhost
  become: false
  when: (use_env_file or custom_git_config_file is defined) and env_file_stat.stat.exists
  changed_when: false
  no_log: true  # Don't log PATs
  tags:
    - git
    - env-file

- name: Parse environment variables - default case
  set_fact:
    env_vars:
      git_servers: []
  when: (use_env_file or custom_git_config_file is defined) and (not env_file_stat.stat.exists or env_vars_result.stdout is not defined)
  tags:
    - git
    - env-file

- name: Debug env_vars_result
  debug:
    var: env_vars_result
  when: (use_env_file or custom_git_config_file is defined) and env_file_stat.stat.exists
  tags:
    - git
    - env-file

- name: Parse environment variables - from file
  set_fact:
    env_vars: "{{ env_vars_result.stdout | from_json }}"
  when: (use_env_file or custom_git_config_file is defined) and env_file_stat.stat.exists and env_vars_result.stdout is defined
  tags:
    - git
    - env-file

- name: Fail if .env file is required but missing
  fail:
    msg: |
      .env file is required but not found at: {{ env_file_path }}
      Please copy .env.example to .env and configure your credentials.
  when: env_file_required and (not env_file_stat.stat.exists)
  tags:
    - git
    - env-file

# Git Credential Manager installation
- name: Ensure temp directory exists for GCM download
  file:
    path: "{{ gcm_temp_dir }}"
    state: directory
    mode: '0755'
  when: install_git_credential_manager
  tags:
    - git
    - credential-manager
    - directory-setup

- name: Install Git Credential Manager
  block:
    - name: Check if Git Credential Manager is already installed
      command: git-credential-manager --version
      register: gcm_check
      changed_when: false
      failed_when: false

    - name: Download Git Credential Manager .deb package
      get_url:
        url: "{{ gcm_download_url }}"
        dest: "{{ gcm_temp_dir }}/{{ gcm_package_name }}"
        mode: '0644'
        timeout: "{{ download_timeout | default(120) }}"
      register: gcm_download
      until: gcm_download is succeeded
      retries: 3
      delay: 5
      when: gcm_check.rc != 0

    - name: Install Git Credential Manager package
      apt:
        deb: "{{ gcm_temp_dir }}/{{ gcm_package_name }}"
        state: present
      become: true
      when: gcm_check.rc != 0

    - name: Clean up downloaded package
      file:
        path: "{{ gcm_temp_dir }}/{{ gcm_package_name }}"
        state: absent
      when: gcm_check.rc != 0

    - name: Configure Git Credential Manager globally
      command: git-credential-manager configure
      become: true
      when: gcm_check.rc != 0

  when: install_git_credential_manager
  tags:
    - git
    - credential-manager

# git-credential-oauth installation (alternative)
- name: Install git-credential-oauth
  block:
    - name: Install git-credential-oauth package
      apt:
        name: git-credential-oauth
        state: present
        update_cache: false
      become: true

  when: install_git_credential_oauth
  tags:
    - git
    - credential-oauth

# SSH key generation
- name: Generate SSH keys for users
  block:
    - name: Get user home directories
      getent:
        database: passwd
        key: "{{ item }}"
      register: user_info
      loop: "{{ configure_git_for_users }}"

    - name: Ensure .ssh directory exists
      file:
        path: "{{ user_info.results[index].ansible_facts.getent_passwd[item][4] }}/.ssh"
        state: directory
        mode: '0700'
        owner: "{{ item }}"
        group: "{{ item }}"
      loop: "{{ configure_git_for_users }}"
      loop_control:
        index_var: index
      become: true

    - name: Generate SSH key pair
      openssh_keypair:
        path: "{{ user_info.results[index].ansible_facts.getent_passwd[item][4] }}/.ssh/id_{{ ssh_key_type }}"
        type: "{{ ssh_key_type }}"
        comment: "{{ ssh_key_comment }}"
        owner: "{{ item }}"
        group: "{{ item }}"
        mode: '0600'
      loop: "{{ configure_git_for_users }}"
      loop_control:
        index_var: index
      become: true
      register: ssh_key_generation

    - name: Display SSH public key paths
      debug:
        msg:
          - "SSH key pair generated for {{ item }}"
          - "Public key location: {{ user_info.results[index].ansible_facts.getent_passwd[item][4] }}/.ssh/id_{{ ssh_key_type }}.pub"
          - "Private key location: {{ user_info.results[index].ansible_facts.getent_passwd[item][4] }}/.ssh/id_{{ ssh_key_type }}"
      loop: "{{ configure_git_for_users }}"
      loop_control:
        index_var: index
      when: ssh_key_generation is changed

  when: generate_ssh_keys and configure_git_for_users | length > 0
  tags:
    - git
    - ssh-keys

# Git user configuration
- name: Configure Git user settings
  block:
    - name: Get user home directories for Git config
      getent:
        database: passwd
        key: "{{ item }}"
      register: git_user_info
      loop: "{{ configure_git_for_users }}"

    - name: Set final Git user name and email
      set_fact:
        final_git_user_name: "{{ env_vars.git_user_name | default(git_user_name) if (use_env_file and env_vars is defined and env_vars.git_user_name is defined and env_vars.git_user_name) else (git_user_name if git_user_name else 'Configure Manually') }}"
        final_git_user_email: "{{ env_vars.git_user_email | default(git_user_email) if (use_env_file and env_vars is defined and env_vars.git_user_email is defined and env_vars.git_user_email) else (git_user_email if git_user_email else 'configure@manually.com') }}"

    - name: Set Git user.name
      git_config:
        name: user.name
        value: "{{ final_git_user_name }}"
        scope: global
      become_user: "{{ item }}"
      loop: "{{ configure_git_for_users }}"
      when: configure_git_user

    - name: Set Git user.email
      git_config:
        name: user.email
        value: "{{ final_git_user_email }}"
        scope: global
      become_user: "{{ item }}"
      loop: "{{ configure_git_for_users }}"
      when: configure_git_user

    - name: Set Git credential helper (when GCM is installed)
      git_config:
        name: credential.helper
        value: "manager"
        scope: global
      become_user: "{{ item }}"
      loop: "{{ configure_git_for_users }}"

    - name: Configure GCM credential store
      git_config:
        name: credential.credentialStore
        value: "cache"
        scope: global
      become_user: "{{ item }}"
      loop: "{{ configure_git_for_users }}"
      when: install_git_credential_manager

    - name: Set Git credential helper (when OAuth is installed)
      git_config:
        name: credential.helper
        value: "oauth"
        scope: global
      become_user: "{{ item }}"
      loop: "{{ configure_git_for_users }}"
      when: install_git_credential_oauth and not install_git_credential_manager

  when: configure_git_for_users | length > 0
  tags:
    - git
    - configuration

# URL-based Personal Access Token configuration
- name: Configure Personal Access Tokens for discovered Git servers
  block:
    - name: Display discovered Git servers
      debug:
        msg:
          - "Discovered {{ env_vars.git_servers | length }} Git servers from .env file:"
          - "{{ env_vars.git_servers | map(attribute='id') | join(', ') }}"
      when: env_vars.git_servers | length > 0

    - name: Register credentials for each Git server
      shell: |
        printf "protocol=https\nhost={{ git_server.host }}\nusername={{ git_server.username }}\npassword={{ git_server.pat }}\n" | git-credential-manager store --no-ui
      become_user: "{{ user_item }}"
      vars:
        git_server: "{{ item.1 }}"
        user_item: "{{ item.0 }}"
      with_nested:
        - "{{ configure_git_for_users }}"
        - "{{ env_vars.git_servers }}"
      when: 
        - install_git_credential_manager
        - git_server.url and git_server.username and git_server.pat
      no_log: true  # Don't log PATs

  when: configure_pats and install_git_credential_manager and use_env_file and env_vars.git_servers | length > 0
  tags:
    - git
    - credentials
    - pats

# Advanced Git configuration
- name: Configure advanced Git settings
  block:
    - name: Configure Git signing key
      git_config:
        name: user.signingkey
        value: "{{ env_vars.git_signing_key }}"
        scope: global
      become_user: "{{ item }}"
      loop: "{{ configure_git_for_users }}"
      when: 
        - configure_git_signing
        - use_env_file and env_vars is defined and env_vars.git_signing_key is defined and env_vars.git_signing_key

    - name: Enable commit signing
      git_config:
        name: commit.gpgsign
        value: "{{ env_vars.git_sign_commits }}"
        scope: global
      become_user: "{{ item }}"
      loop: "{{ configure_git_for_users }}"
      when: 
        - configure_git_signing
        - use_env_file and env_vars is defined and env_vars.git_sign_commits is defined and env_vars.git_sign_commits == "true"

    - name: Find default Git service URL for SSH conversion
      set_fact:
        default_service_url: "{{ (env_vars.git_servers | selectattr('id', 'equalto', env_vars.DEFAULT_GIT_SERVICE | default('GITHUB')) | list | first).url | default('') }}"
      when: 
        - use_env_file and env_vars is defined
        - env_vars.git_servers | length > 0
        - env_vars.ENABLE_SSH_CONVERSION is defined
        - env_vars.ENABLE_SSH_CONVERSION == "true"

    - name: Configure SSH URL conversion for default service
      git_config:
        name: "url.git@{{ default_service_url | regex_replace('^https://') }}:.insteadOf"
        value: "{{ default_service_url }}/"
        scope: global
      become_user: "{{ item }}"
      loop: "{{ configure_git_for_users }}"
      when: 
        - use_env_file and env_vars is defined
        - env_vars.ENABLE_SSH_CONVERSION is defined
        - env_vars.ENABLE_SSH_CONVERSION == "true"
        - generate_ssh_keys
        - default_service_url

  when: configure_git_for_users | length > 0
  tags:
    - git
    - advanced-config

# Validation
- name: Validate Git installation and configuration
  block:
    - name: Check Git version
      command: git --version
      register: git_version_output
      changed_when: false

    - name: Check Git Credential Manager
      command: git-credential-manager --version
      register: gcm_version_output
      changed_when: false
      failed_when: false
      when: install_git_credential_manager

    - name: Check git-credential-oauth
      command: git-credential-oauth --version
      register: oauth_version_output
      changed_when: false
      failed_when: false
      when: install_git_credential_oauth

    - name: Check Git configuration for users
      command: git config --global --list
      register: git_config_output
      become_user: "{{ item }}"
      loop: "{{ configure_git_for_users }}"
      changed_when: false
      failed_when: false

    - name: Display Git validation results
      debug:
        msg:
          - "=== Git Installation Validation ==="
          - "Git Version: {{ git_version_output.stdout }}"
          - "GCM Version: {{ gcm_version_output.stdout if install_git_credential_manager and gcm_version_output.rc == 0 else 'Not installed' }}"
          - "OAuth Version: {{ oauth_version_output.stdout if install_git_credential_oauth and oauth_version_output.rc == 0 else 'Not installed' }}"
          - "Environment File: {{ 'Loaded' if (use_env_file and env_file_stat.stat.exists) else 'Not used' }}"
          - "Git Servers Configured: {{ env_vars.git_servers | length if (use_env_file and env_vars is defined) else 0 }}"
          - "{{ 'Configured Git Servers: ' + (env_vars.git_servers | map(attribute='id') | join(', ')) if (use_env_file and env_vars is defined and env_vars.git_servers | length > 0) else '' }}"
          - ""
          - "=== Next Steps ==="
          - "1. {{ 'Git identity: ' + final_git_user_name + ' <' + final_git_user_email + '>' if (final_git_user_name is defined and final_git_user_email is defined) else 'Configure Git identity manually' }}"
          - "2. Test repository access from configured servers"
          - "{{ '3. SSH public key is available at ~/.ssh/id_' + ssh_key_type + '.pub' if generate_ssh_keys else '' }}"
          - "{{ '4. SSH URL conversion enabled for: ' + default_service_url if (default_service_url is defined and default_service_url) else '' }}"

  when: validate_installation
  tags:
    - git
    - validation