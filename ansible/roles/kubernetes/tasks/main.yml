---
# Kubernetes role tasks - Install kubectl, kind, kompose, and bash completions

- name: Install bash-completion package
  apt:
    name: "{{ bash_completion_package }}"
    state: present
    update_cache: true
  when: install_bash_completion
  tags:
    - kubernetes
    - bash-completion

# kubectl installation
- name: Install kubectl from Kubernetes repository
  block:
    - name: Download Kubernetes GPG key
      shell: |
        curl -fsSL {{ kubernetes_gpg_key_url }} | gpg --dearmor -o {{ kubernetes_gpg_key_path }}
        chmod 644 {{ kubernetes_gpg_key_path }}
      args:
        creates: "{{ kubernetes_gpg_key_path }}"
      tags:
        - kubernetes
        - kubectl
        - repository

    - name: Add Kubernetes repository
      apt_repository:
        repo: "deb [signed-by={{ kubernetes_gpg_key_path }}] {{ kubernetes_repo_url }} /"
        filename: kubernetes
        state: present
        update_cache: true
      tags:
        - kubernetes
        - kubectl
        - repository

    - name: Install kubectl
      apt:
        name: kubectl
        state: present
        update_cache: false
      tags:
        - kubernetes
        - kubectl

    - name: Hold kubectl package from automatic updates
      dpkg_selections:
        name: kubectl
        selection: hold
      when: kubectl_hold_package
      tags:
        - kubernetes
        - kubectl

  when: install_kubectl

# kind installation
- name: Install kind (Kubernetes IN Docker)
  block:
    - name: Download kind binary
      get_url:
        url: "{{ kind_binary_url }}"
        dest: "{{ kind_install_path }}"
        mode: '0755'
        owner: root
        group: root
        timeout: 30
      register: kind_download
      until: kind_download is succeeded
      retries: 3
      delay: 5
      tags:
        - kubernetes
        - kind

    - name: Verify kind installation
      command: "{{ kind_install_path }} version"
      register: kind_version_check
      changed_when: false
      tags:
        - kubernetes
        - kind

  when: install_kind

# kompose installation
- name: Install kompose (Compose to Kubernetes converter)
  block:
    - name: Download kompose binary
      get_url:
        url: "{{ kompose_binary_url }}"
        dest: "{{ kompose_install_path }}"
        mode: '0755'
        owner: root
        group: root
        timeout: 30
      register: kompose_download
      until: kompose_download is succeeded
      retries: 3
      delay: 5
      tags:
        - kubernetes
        - kompose

    - name: Verify kompose installation
      command: "{{ kompose_install_path }} version"
      register: kompose_version_check
      changed_when: false
      tags:
        - kubernetes
        - kompose

  when: install_kompose

# k3s installation
- name: Install k3s (Lightweight Kubernetes)
  block:
    - name: Check if k3s is already installed
      command: k3s --version
      register: k3s_check
      failed_when: false
      changed_when: false
      tags:
        - kubernetes
        - k3s

    - name: Build k3s installation command
      set_fact:
        k3s_install_env: |
          {% if k3s_version %}
          INSTALL_K3S_VERSION={{ k3s_version }}
          {% elif k3s_channel %}
          INSTALL_K3S_CHANNEL={{ k3s_channel }}
          {% endif %}
      when: k3s_check.rc != 0
      tags:
        - kubernetes
        - k3s

    - name: Download and install k3s
      shell: |
        curl -sfL {{ k3s_install_script_url }} | {{ k3s_install_env | trim }} sh -
      when: k3s_check.rc != 0
      tags:
        - kubernetes
        - k3s

    - name: Ensure k3s service is started and enabled
      systemd:
        name: "{{ k3s_service_name }}"
        state: started
        enabled: true
        daemon_reload: true
      tags:
        - kubernetes
        - k3s

    - name: Create k3s config directory for target user
      file:
        path: "{{ target_user_home }}/.kube"
        state: directory
        owner: "{{ target_user }}"
        group: "{{ target_user }}"
        mode: '0755'
      tags:
        - kubernetes
        - k3s

    - name: Copy k3s kubeconfig for target user
      copy:
        src: "{{ k3s_kubeconfig_path }}"
        dest: "{{ k3s_user_kubeconfig_path }}"
        owner: "{{ target_user }}"
        group: "{{ target_user }}"
        mode: '0600'
        remote_src: true
      tags:
        - kubernetes
        - k3s

    - name: Add target user to k3s group (if exists)
      user:
        name: "{{ target_user }}"
        groups: k3s
        append: true
      failed_when: false  # Group might not exist
      tags:
        - kubernetes
        - k3s

    - name: Verify k3s installation
      command: k3s kubectl version --client
      register: k3s_version_check
      changed_when: false
      tags:
        - kubernetes
        - k3s

  when: install_k3s

# Bash completions setup
- name: Configure bash completions for Kubernetes tools
  block:
    - name: Get user home directories
      getent:
        database: passwd
        key: "{{ item }}"
      register: user_info
      loop: "{{ configure_completions_for_users }}"
      tags:
        - kubernetes
        - bash-completion

    - name: Create kubectl completion script
      shell: kubectl completion bash > /etc/bash_completion.d/kubectl
      args:
        creates: /etc/bash_completion.d/kubectl
      when: install_kubectl
      tags:
        - kubernetes
        - bash-completion
        - kubectl

    - name: Add kubectl completion to user .bashrc
      lineinfile:
        path: "{{ user_info.results[index].ansible_facts.getent_passwd[item][4] }}/.bashrc"
        line: "source <(kubectl completion bash)"
        create: true
        owner: "{{ item }}"
        group: "{{ item }}"
      loop: "{{ configure_completions_for_users }}"
      loop_control:
        index_var: index
      when: install_kubectl and install_bash_completion
      tags:
        - kubernetes
        - bash-completion
        - kubectl

    - name: Add kind completion to user .bashrc
      lineinfile:
        path: "{{ user_info.results[index].ansible_facts.getent_passwd[item][4] }}/.bashrc"
        line: "source <(kind completion bash)"
        create: true
        owner: "{{ item }}"
        group: "{{ item }}"
      loop: "{{ configure_completions_for_users }}"
      loop_control:
        index_var: index
      when: install_kind and install_bash_completion
      tags:
        - kubernetes
        - bash-completion
        - kind

    - name: Add k3s kubectl completion to user .bashrc
      lineinfile:
        path: "{{ user_info.results[index].ansible_facts.getent_passwd[item][4] }}/.bashrc"
        line: "source <(k3s kubectl completion bash)"
        create: true
        owner: "{{ item }}"
        group: "{{ item }}"
      loop: "{{ configure_completions_for_users }}"
      loop_control:
        index_var: index
      when: install_k3s and install_bash_completion
      tags:
        - kubernetes
        - bash-completion
        - k3s

    - name: Add Kubernetes and Docker aliases to user .bashrc
      blockinfile:
        path: "{{ user_info.results[index].ansible_facts.getent_passwd[item][4] }}/.bashrc"
        marker: "# {mark} ANSIBLE MANAGED BLOCK - Kubernetes and Docker aliases"
        block: |
          # Kubernetes aliases (kubectl or k3s kubectl)
          {% if install_k3s %}
          alias k='k3s kubectl'
          alias kubectl='k3s kubectl'
          alias kgp='k3s kubectl get pods'
          alias kgs='k3s kubectl get services'
          alias kgd='k3s kubectl get deployments'
          # Set up completion for k3s kubectl and k alias
          complete -o default -F __start_kubectl k
          {% else %}
          alias k=kubectl
          alias kgp='kubectl get pods'
          alias kgs='kubectl get services'
          alias kgd='kubectl get deployments'
          complete -o default -F __start_kubectl k
          {% endif %}
          {% if install_docker_with_k3s or not install_k3s %}
          # Docker aliases
          alias d=docker
          alias dc='docker compose'
          alias dps='docker ps'
          alias di='docker images'
          {% endif %}
        create: true
        owner: "{{ item }}"
        group: "{{ item }}"
      loop: "{{ configure_completions_for_users }}"
      loop_control:
        index_var: index
      when: (install_kubectl or install_k3s) and install_bash_completion
      tags:
        - kubernetes
        - bash-completion
        - aliases

  when: install_bash_completion and configure_completions_for_users | length > 0

# Validation
- name: Validate Kubernetes tools installation
  block:
    - name: Check kubectl version
      command: kubectl version --client
      register: kubectl_version_output
      changed_when: false
      when: install_kubectl

    - name: Check kind version
      command: "{{ kind_install_path }} version"
      register: kind_version_output
      changed_when: false
      when: install_kind

    - name: Check kompose version
      command: "{{ kompose_install_path }} version"
      register: kompose_version_output
      changed_when: false
      when: install_kompose

    - name: Check k3s version
      command: k3s --version
      register: k3s_version_output
      changed_when: false
      when: install_k3s

    - name: Display Kubernetes tools versions
      debug:
        msg:
          - "=== Kubernetes Tools Installed ==="
          - "kubectl: {{ kubectl_version_output.stdout if install_kubectl else 'Not installed' }}"
          - "kind: {{ kind_version_output.stdout if install_kind else 'Not installed' }}"
          - "k3s: {{ k3s_version_output.stdout if install_k3s else 'Not installed' }}"
          - "kompose: {{ kompose_version_output.stdout if install_kompose else 'Not installed' }}"

    - name: Verify bash completion is available
      shell: |
        [ -f /etc/bash_completion.d/kubectl ] && echo "kubectl completion: INSTALLED" || echo "kubectl completion: NOT FOUND"
      register: completion_check
      changed_when: false
      when: install_bash_completion and install_kubectl

    - name: Display completion status
      debug:
        msg: "{{ completion_check.stdout }}"
      when: install_bash_completion and install_kubectl and completion_check is defined

  when: validate_installation
  tags:
    - kubernetes
    - validation