---
# Kubernetes role tasks - Install kubectl, kind, kompose, and bash completions

- name: Get target user information
  getent:
    database: passwd
    key: "{{ target_user }}"
  register: user_info
  tags:
    - kubernetes

- name: Set target user home directory
  set_fact:
    target_user_home: "{{ user_info.ansible_facts.getent_passwd[target_user][4] }}"
  tags:
    - kubernetes

- name: Check if bash-completion is already installed
  command: dpkg -l bash-completion
  register: bash_completion_check
  failed_when: false
  changed_when: false
  when: install_bash_completion
  tags:
    - kubernetes
    - bash-completion

- name: Install bash-completion package
  apt:
    name: "{{ bash_completion_package }}"
    state: present
    update_cache: true
  when: install_bash_completion and bash_completion_check.rc != 0
  tags:
    - kubernetes
    - bash-completion

# kubectl installation
- name: Check if kubectl is already installed
  command: kubectl version --client
  register: kubectl_check
  failed_when: false
  changed_when: false
  when: install_kubectl
  tags:
    - kubernetes
    - kubectl

- name: Install kubectl from Kubernetes repository
  block:
    - name: Install prerequisites for kubectl and Ansible Kubernetes modules
      apt:
        name:
          - curl
          - gnupg
          - python3-debian
          - python3-pip
          - python3-kubernetes
        state: present
      tags:
        - kubernetes
        - kubectl
        - prerequisites

    - name: Install Kubernetes Python module for Ansible
      apt:
        name:
          - python3-kubernetes
          - python3-yaml
        state: present
      become: true
      tags:
        - kubernetes
        - ansible-modules

    - name: Download and install Kubernetes GPG key
      shell: |
        curl -fsSL {{ kubernetes_gpg_key_url }} | gpg --dearmor -o {{ kubernetes_gpg_key_path }}
        chmod 644 {{ kubernetes_gpg_key_path }}
      args:
        creates: "{{ kubernetes_gpg_key_path }}"
      tags:
        - kubernetes
        - kubectl
        - repository

    - name: Add Kubernetes repository using deb822 format
      ansible.builtin.deb822_repository:
        name: kubernetes
        types: [deb]
        uris: "{{ kubernetes_repo_url }}"
        suites: ["/"]
        components: []
        signed_by: "{{ kubernetes_gpg_key_path }}"
        state: present
      tags:
        - kubernetes
        - kubectl
        - repository

    - name: Update apt cache after adding repository
      apt:
        update_cache: true
      tags:
        - kubernetes
        - kubectl

    - name: Install kubectl
      apt:
        name: kubectl
        state: present
      tags:
        - kubernetes
        - kubectl

    - name: Hold kubectl package from automatic updates
      dpkg_selections:
        name: kubectl
        selection: hold
      when: kubectl_hold_package
      tags:
        - kubernetes
        - kubectl

  when: install_kubectl and kubectl_check.rc != 0

# kind installation
- name: Install kind (Kubernetes IN Docker)
  block:
    - name: Download kind binary
      get_url:
        url: "{{ kind_binary_url }}"
        dest: "{{ kind_install_path }}"
        mode: '0755'
        owner: root
        group: root
        timeout: 30
      register: kind_download
      until: kind_download is succeeded
      retries: 3
      delay: 5
      tags:
        - kubernetes
        - kind

    - name: Verify kind installation
      command: "{{ kind_install_path }} version"
      register: kind_version_check
      changed_when: false
      tags:
        - kubernetes
        - kind

  when: install_kind

# Helm installation
- name: Install Helm (Kubernetes package manager)
  block:
    - name: Create temporary directory for Helm download
      tempfile:
        state: directory
        suffix: helm
      register: helm_temp_dir
      tags:
        - kubernetes
        - helm

    - name: Download Helm tarball
      get_url:
        url: "{{ helm_binary_url }}"
        dest: "{{ helm_temp_dir.path }}/helm.tar.gz"
        timeout: 30
      register: helm_download
      until: helm_download is succeeded
      retries: 3
      delay: 5
      tags:
        - kubernetes
        - helm

    - name: Extract Helm binary
      unarchive:
        src: "{{ helm_temp_dir.path }}/helm.tar.gz"
        dest: "{{ helm_temp_dir.path }}"
        remote_src: true
      tags:
        - kubernetes
        - helm

    - name: Install Helm binary
      copy:
        src: "{{ helm_temp_dir.path }}/linux-amd64/helm"
        dest: "{{ helm_install_path }}"
        mode: '0755'
        owner: root
        group: root
        remote_src: true
      tags:
        - kubernetes
        - helm

    - name: Clean up Helm temporary directory
      file:
        path: "{{ helm_temp_dir.path }}"
        state: absent
      tags:
        - kubernetes
        - helm

    - name: Verify Helm installation
      command: "{{ helm_install_path }} version"
      register: helm_version_check
      changed_when: false
      tags:
        - kubernetes
        - helm

  when: install_helm

# kompose installation
- name: Install kompose (Compose to Kubernetes converter)
  block:
    - name: Download kompose binary
      get_url:
        url: "{{ kompose_binary_url }}"
        dest: "{{ kompose_install_path }}"
        mode: '0755'
        owner: root
        group: root
        timeout: 30
      register: kompose_download
      until: kompose_download is succeeded
      retries: 3
      delay: 5
      tags:
        - kubernetes
        - kompose

    - name: Verify kompose installation
      command: "{{ kompose_install_path }} version"
      register: kompose_version_check
      changed_when: false
      tags:
        - kubernetes
        - kompose

  when: install_kompose

# k3s installation
- name: Install k3s (Lightweight Kubernetes)
  block:
    - name: Check if k3s is already installed
      command: k3s --version
      register: k3s_check
      failed_when: false
      changed_when: false
      tags:
        - kubernetes
        - k3s

    - name: Build k3s installation command
      set_fact:
        k3s_install_env: "{% if k3s_version %}INSTALL_K3S_VERSION={{ k3s_version }}{% elif k3s_channel %}INSTALL_K3S_CHANNEL={{ k3s_channel }}{% endif %}"
        k3s_install_args: "--write-kubeconfig-mode=644 --write-kubeconfig-group={{ target_user }}{% if install_nginx_ingress or k3s_ingress_controller == 'nginx' %} --disable=traefik{% elif k3s_ingress_controller == 'none' %} --disable=traefik{% endif %}"
      when: k3s_check.rc != 0
      tags:
        - kubernetes
        - k3s

    - name: Download and install k3s with timeout
      shell: |
        timeout {{ k3s_install_timeout | default(300) }} curl -sfL {{ k3s_install_script_url }} | {{ k3s_install_env | trim }} sh -s - {{ k3s_install_args | trim }}
      when: k3s_check.rc != 0
      async: "{{ k3s_install_timeout | default(300) }}"
      poll: 5
      tags:
        - kubernetes
        - k3s

    - name: Ensure k3s service is started and enabled
      systemd:
        name: "{{ k3s_service_name }}"
        state: started
        enabled: true
        daemon_reload: true
      async: "{{ k3s_service_start_timeout | default(60) }}"
      poll: 2
      tags:
        - kubernetes
        - k3s

    - name: Create k3s config directory for target user
      file:
        path: "{{ target_user_home }}/.kube"
        state: directory
        owner: "{{ target_user }}"
        group: "{{ target_user }}"
        mode: '0755'
      tags:
        - kubernetes
        - k3s

    - name: Copy k3s kubeconfig for target user
      copy:
        src: "{{ k3s_kubeconfig_path }}"
        dest: "{{ k3s_user_kubeconfig_path }}"
        owner: "{{ target_user }}"
        group: "{{ target_user }}"
        mode: '0600'
        remote_src: true
      tags:
        - kubernetes
        - k3s

    - name: Add target user to k3s group (if exists)
      user:
        name: "{{ target_user }}"
        groups: k3s
        append: true
      failed_when: false  # Group might not exist
      tags:
        - kubernetes
        - k3s

    - name: Create host kubeconfig directory
      local_action:
        module: file
        path: "{{ host_kubeconfig_directory | expanduser }}"
        state: directory
        mode: '0755'
      when: copy_kubeconfig_to_host
      become: false
      tags:
        - kubernetes
        - k3s
        - kubeconfig

    - name: Copy kubeconfig to host machine
      fetch:
        src: "{{ k3s_user_kubeconfig_path }}"
        dest: "{{ host_kubeconfig_directory | expanduser }}/{{ kubeconfig_filename_template }}"
        flat: true
        mode: '0600'
      when: copy_kubeconfig_to_host
      tags:
        - kubernetes
        - k3s
        - kubeconfig

    - name: Display kubeconfig copy status
      debug:
        msg: 
          - "Kubeconfig copied to host machine:"
          - "Location: {{ host_kubeconfig_directory | expanduser }}/{{ kubeconfig_filename_template }}"
          - "To use: export KUBECONFIG={{ host_kubeconfig_directory | expanduser }}/{{ kubeconfig_filename_template }}"
          - "Or: kubectl --kubeconfig={{ host_kubeconfig_directory | expanduser }}/{{ kubeconfig_filename_template }} get nodes"
      when: copy_kubeconfig_to_host
      tags:
        - kubernetes
        - k3s
        - kubeconfig

    - name: Verify k3s installation
      command: k3s kubectl version --client
      register: k3s_version_check
      changed_when: false
      tags:
        - kubernetes
        - k3s

  when: install_k3s

# NGINX Ingress Controller installation
- name: Install NGINX Ingress Controller
  block:
    - name: Wait for k3s API server to be ready
      wait_for:
        port: 6443
        host: "127.0.0.1"
        delay: 5
        timeout: "{{ k3s_service_start_timeout | default(60) }}"
      tags:
        - kubernetes
        - nginx-ingress

    - name: Build NGINX Ingress manifest URL
      set_fact:
        nginx_manifest_url: |
          {% if nginx_ingress_version %}
          https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-{{ nginx_ingress_version }}/deploy/static/provider/cloud/deploy.yaml
          {% else %}
          https://raw.githubusercontent.com/kubernetes/ingress-nginx/main/deploy/static/provider/cloud/deploy.yaml
          {% endif %}
      tags:
        - kubernetes
        - nginx-ingress

    - name: Apply NGINX Ingress Controller manifest
      shell: |
        k3s kubectl apply -f {{ nginx_manifest_url | trim }}
      register: nginx_ingress_result
      tags:
        - kubernetes
        - nginx-ingress

    - name: Configure NGINX Ingress Controller with VM IP address
      shell: |
        k3s kubectl patch service ingress-nginx-controller \
          -n ingress-nginx \
          --type='merge' \
          -p='{"spec":{"externalIPs":["{{ ansible_default_ipv4.address }}"]}}'
      register: nginx_ip_patch
      tags:
        - kubernetes
        - nginx-ingress

    - name: Wait for NGINX Ingress Controller to be ready
      shell: |
        k3s kubectl wait --namespace ingress-nginx \
          --for=condition=ready pod \
          --selector=app.kubernetes.io/component=controller \
          --timeout={{ nginx_ingress_ready_timeout | default(180) }}s
      register: nginx_wait_result
      async: "{{ nginx_ingress_ready_timeout | default(180) }}"
      poll: 5
      tags:
        - kubernetes
        - nginx-ingress

    - name: Verify NGINX Ingress Controller installation
      shell: |
        k3s kubectl get pods -n ingress-nginx
      register: nginx_pods_check
      tags:
        - kubernetes
        - nginx-ingress

    - name: Display NGINX Ingress status
      debug:
        msg:
          - "=== NGINX Ingress Controller Status ==="
          - "{{ nginx_pods_check.stdout_lines }}"
      tags:
        - kubernetes
        - nginx-ingress

  when: install_k3s and install_nginx_ingress

# User CLAUDE.md configuration
- name: Create user CLAUDE.md configuration
  block:
    - name: Check if user already has CLAUDE.md
      stat:
        path: "{{ target_user_home }}/.claude/CLAUDE.md"
      register: user_claude_config
      tags:
        - kubernetes
        - user-config

    - name: Create .claude directory for user
      file:
        path: "{{ target_user_home }}/.claude"
        state: directory
        owner: "{{ target_user }}"
        group: "{{ target_user }}"
        mode: '0755'
      when: not user_claude_config.stat.exists
      tags:
        - kubernetes
        - user-config

    - name: Generate CLAUDE.md from template for user (process conditionals)
      template:
        src: "../../config/CLAUDE.md.default"
        dest: "{{ target_user_home }}/.claude/CLAUDE.md"
        owner: "{{ target_user }}"
        group: "{{ target_user }}"
        mode: '0644'
      when: not user_claude_config.stat.exists
      tags:
        - kubernetes
        - user-config

    - name: Display CLAUDE.md configuration notice
      debug:
        msg:
          - "=== User CLAUDE.md Configuration ==="
          - "{{ 'User already has ~/.claude/CLAUDE.md - skipped creation' if user_claude_config.stat.exists else 'Created ~/.claude/CLAUDE.md with development environment guidance' }}"
          - "This file provides Claude Code with context about:"
          - "- Kubernetes runtime (k3s with NGINX Ingress)"
          - "- Kubeconfig location (~/.kube/config)"
          - "- Git branch and push policy"
          - "- Development environment setup"
      tags:
        - kubernetes
        - user-config

  when: install_k3s and create_user_claude_config

# Bash completions setup
- name: Configure bash completions for Kubernetes tools
  block:
    - name: Get user home directories
      getent:
        database: passwd
        key: "{{ item }}"
      register: user_info
      loop: "{{ configure_completions_for_users }}"
      tags:
        - kubernetes
        - bash-completion

    - name: Create kubectl completion script
      shell: kubectl completion bash > /etc/bash_completion.d/kubectl
      args:
        creates: /etc/bash_completion.d/kubectl
      when: install_kubectl
      tags:
        - kubernetes
        - bash-completion
        - kubectl

    - name: Add kubectl completion to user .bashrc
      lineinfile:
        path: "{{ user_info.results[index].ansible_facts.getent_passwd[item][4] }}/.bashrc"
        line: "source <(kubectl completion bash)"
        create: true
        owner: "{{ item }}"
        group: "{{ item }}"
      loop: "{{ configure_completions_for_users }}"
      loop_control:
        index_var: index
      when: install_kubectl and install_bash_completion
      tags:
        - kubernetes
        - bash-completion
        - kubectl

    - name: Add kind completion to user .bashrc
      lineinfile:
        path: "{{ user_info.results[index].ansible_facts.getent_passwd[item][4] }}/.bashrc"
        line: "source <(kind completion bash)"
        create: true
        owner: "{{ item }}"
        group: "{{ item }}"
      loop: "{{ configure_completions_for_users }}"
      loop_control:
        index_var: index
      when: install_kind and install_bash_completion
      tags:
        - kubernetes
        - bash-completion
        - kind

    - name: Add k3s kubectl completion to user .bashrc
      lineinfile:
        path: "{{ user_info.results[index].ansible_facts.getent_passwd[item][4] }}/.bashrc"
        line: "source <(k3s kubectl completion bash)"
        create: true
        owner: "{{ item }}"
        group: "{{ item }}"
      loop: "{{ configure_completions_for_users }}"
      loop_control:
        index_var: index
      when: install_k3s and install_bash_completion
      tags:
        - kubernetes
        - bash-completion
        - k3s

    - name: Add Helm completion to user .bashrc
      lineinfile:
        path: "{{ user_info.results[index].ansible_facts.getent_passwd[item][4] }}/.bashrc"
        line: "source <(helm completion bash)"
        create: true
        owner: "{{ item }}"
        group: "{{ item }}"
      loop: "{{ configure_completions_for_users }}"
      loop_control:
        index_var: index
      when: install_helm and install_bash_completion
      tags:
        - kubernetes
        - bash-completion
        - helm

    - name: Add Kubernetes and Docker aliases to user .bashrc
      blockinfile:
        path: "{{ user_info.results[index].ansible_facts.getent_passwd[item][4] }}/.bashrc"
        marker: "# {mark} ANSIBLE MANAGED BLOCK - Kubernetes and Docker aliases"
        block: |
          # Kubernetes aliases (kubectl or k3s kubectl)
          {% if install_k3s %}
          alias k='k3s kubectl'
          alias kubectl='k3s kubectl'
          alias kgp='k3s kubectl get pods'
          alias kgs='k3s kubectl get services'
          alias kgd='k3s kubectl get deployments'
          # Set up completion for k3s kubectl and k alias
          complete -o default -F __start_kubectl k
          {% else %}
          alias k=kubectl
          alias kgp='kubectl get pods'
          alias kgs='kubectl get services'
          alias kgd='kubectl get deployments'
          complete -o default -F __start_kubectl k
          {% endif %}
          {% if install_docker_with_k3s or not install_k3s %}
          # Docker aliases
          alias d=docker
          alias dc='docker compose'
          alias dps='docker ps'
          alias di='docker images'
          {% endif %}
        create: true
        owner: "{{ item }}"
        group: "{{ item }}"
      loop: "{{ configure_completions_for_users }}"
      loop_control:
        index_var: index
      when: (install_kubectl or install_k3s) and install_bash_completion
      tags:
        - kubernetes
        - bash-completion
        - aliases

  when: install_bash_completion and configure_completions_for_users | length > 0

# Validation
- name: Validate Kubernetes tools installation
  block:
    - name: Check kubectl version
      command: kubectl version --client
      register: kubectl_version_output
      changed_when: false
      when: install_kubectl

    - name: Check kind version
      command: "{{ kind_install_path }} version"
      register: kind_version_output
      changed_when: false
      when: install_kind

    - name: Check kompose version
      command: "{{ kompose_install_path }} version"
      register: kompose_version_output
      changed_when: false
      when: install_kompose

    - name: Check k3s version
      command: k3s --version
      register: k3s_version_output
      changed_when: false
      when: install_k3s

    - name: Check Helm version
      command: "{{ helm_install_path }} version"
      register: helm_version_output
      changed_when: false
      when: install_helm

    - name: Display Kubernetes tools versions
      debug:
        msg:
          - "=== Kubernetes Tools Installed ==="
          - "kubectl: {{ kubectl_version_output.stdout if install_kubectl else 'Not installed' }}"
          - "kind: {{ kind_version_output.stdout if install_kind else 'Not installed' }}"
          - "k3s: {{ k3s_version_output.stdout if install_k3s else 'Not installed' }}"
          - "kompose: {{ kompose_version_output.stdout if install_kompose else 'Not installed' }}"
          - "helm: {{ helm_version_output.stdout if install_helm else 'Not installed' }}"

    - name: Verify bash completion is available
      shell: |
        [ -f /etc/bash_completion.d/kubectl ] && echo "kubectl completion: INSTALLED" || echo "kubectl completion: NOT FOUND"
      register: completion_check
      changed_when: false
      when: install_bash_completion and install_kubectl

    - name: Display completion status
      debug:
        msg: "{{ completion_check.stdout }}"
      when: install_bash_completion and install_kubectl and completion_check is defined

  when: validate_installation
  tags:
    - kubernetes
    - validation