---
# MCP (Model Context Protocol) server configuration tasks

- name: Get target user information
  getent:
    database: passwd
    key: "{{ target_user }}"
  register: mcp_user_info
  tags:
    - mcp
    - prerequisites

- name: Set target user home directory
  set_fact:
    target_user_home: "{{ mcp_user_info.ansible_facts.getent_passwd[target_user][4] }}"
  tags:
    - mcp
    - prerequisites

- name: Load environment variables from .env file
  block:
    - name: Check if .env file exists
      stat:
        path: "{{ env_file_path }}"
      register: env_file_stat
      delegate_to: localhost
      become: false
      run_once: true

    - name: Read .env file
      slurp:
        src: "{{ env_file_path }}"
      register: env_file_content
      delegate_to: localhost
      become: false
      run_once: true
      when: env_file_stat.stat.exists

    - name: Parse environment variables
      set_fact:
        env_vars: "{{ env_vars | default({}) | combine({item.split('=')[0]: item.split('=')[1] | regex_replace('^\"|\"$', '')}) }}"
      loop: "{{ (env_file_content.content | b64decode).split('\n') }}"
      when: 
        - env_file_stat.stat.exists
        - item is match('^[A-Z_]+=.*')
        - not item.startswith('#')
      no_log: true

    - name: Display loaded environment variables (masked)
      debug:
        msg: "Loaded {{ env_vars.keys() | list | length }} environment variables from .env file"
      when: env_file_stat.stat.exists
  when: use_env_file
  tags:
    - mcp
    - env-file

- name: Install MCP server dependencies
  apt:
    name:
      - ansible
      - python3-pip
      - pipx
    state: present
  become: true
  tags:
    - mcp
    - prerequisites

- name: Configure MCP servers using claude-code-mcp-management
  block:
    - name: Check if Claude Code is installed and accessible
      shell: "bash -c 'source ~/.bashrc && source /etc/profile.d/npm-global.sh && claude --version'"
      become_user: "{{ target_user }}"
      register: claude_check
      changed_when: false

    - name: Check if local claude-code-mcp-management exists in scripts/
      stat:
        path: "{{ playbook_dir }}/../scripts/claude-code-mcp-management"
      register: local_mcp_management
      delegate_to: localhost
      become: false

    - name: Copy local claude-code-mcp-management to target
      copy:
        src: "{{ playbook_dir }}/../scripts/claude-code-mcp-management/"
        dest: "{{ mcp_management_dir }}/"
        owner: "{{ target_user }}"
        group: "{{ target_user }}"
        mode: preserve
      when: local_mcp_management.stat.exists

    - name: Download claude-code-mcp-management repository (fallback)
      block:
        - name: Ensure temp directory exists
          file:
            path: "{{ temp_dir }}"
            state: directory
            owner: "{{ target_user }}"
            group: "{{ target_user }}"
            mode: '0755'
          become: true

        - name: Download repository archive
          get_url:
            url: "https://github.com/ksamaschke/claude-code-mcp-management/archive/refs/heads/main.zip"
            dest: "{{ temp_dir }}/claude-code-mcp-management.zip"
            owner: "{{ target_user }}"
            group: "{{ target_user }}"
            mode: '0644'

        - name: Ensure tools directory exists
          file:
            path: "{{ tools_dir }}"
            state: directory
            owner: "{{ target_user }}"
            group: "{{ target_user }}"
            mode: '0755'
          become: true

        - name: Extract repository
          unarchive:
            src: "{{ temp_dir }}/claude-code-mcp-management.zip"
            dest: "{{ tools_dir }}/"
            owner: "{{ target_user }}"
            group: "{{ target_user }}"
            remote_src: true

        - name: Rename extracted directory
          command: mv "{{ tools_dir }}/claude-code-mcp-management-main" "{{ mcp_management_dir }}"
          become_user: "{{ target_user }}"
          args:
            creates: "{{ mcp_management_dir }}"

        - name: Clean up downloaded zip file
          file:
            path: "{{ temp_dir }}/claude-code-mcp-management.zip"
            state: absent
      when: not local_mcp_management.stat.exists

    - name: Check if local mcp-servers.json exists
      stat:
        path: "{{ mcp_servers_file }}"
      register: local_mcp_config_exists
      delegate_to: localhost
      become: false

    - name: Generate default MCP servers configuration if none exists locally
      template:
        src: mcp-servers.json.j2
        dest: "{{ mcp_servers_file }}"
        mode: '0600'
      delegate_to: localhost
      become: false
      when: not local_mcp_config_exists.stat.exists

    - name: Copy local mcp-servers.json to claude-code-mcp-management
      copy:
        src: "{{ mcp_servers_file }}"
        dest: "{{ mcp_management_dir }}/mcp-servers.json"
        owner: "{{ target_user }}"
        group: "{{ target_user }}"
        mode: '0600'

    - name: Copy environment variables to claude-code-mcp-management if available
      copy:
        src: "{{ env_file_path }}"
        dest: "{{ mcp_management_dir }}/.env"
        owner: "{{ target_user }}"
        group: "{{ target_user }}"
        mode: '0600'
      when: env_file_stat.stat.exists


    - name: Check dependencies in claude-code-mcp-management
      shell: |
        cd {{ mcp_management_dir }}
        export PATH="{{ target_user_home }}/.npm-global/bin:$PATH"
        make check
      become_user: "{{ target_user }}"
      register: mcp_dependency_check
      failed_when: false
      args:
        executable: /bin/bash

    - name: Install uvx (Python package runner) for MCP servers
      shell: |
        export PATH="$HOME/.local/bin:$PATH"
        pipx install uv
      become_user: "{{ target_user }}"
      args:
        creates: "{{ target_user_home }}/.local/bin/uvx"

    - name: Run MCP server synchronization on target VM
      shell: |
        cd {{ mcp_management_dir }}
        export PATH="{{ target_user_home }}/.npm-global/bin:{{ target_user_home }}/.local/bin:$PATH"
        ls -la mcp-servers.json .env || echo "Files not found"
        make sync CONFIG_FILE=mcp-servers.json ENV_FILE=.env SCOPE=user
      become_user: "{{ target_user }}"
      register: mcp_sync_result
      args:
        executable: /bin/bash

    - name: Display MCP dependency check results
      debug:
        msg: 
          - "=== MCP Dependency Check ==="
          - "{{ mcp_dependency_check.stdout_lines | default(['No output']) }}"
      when: mcp_dependency_check.stdout_lines is defined

    - name: Display MCP synchronization results
      debug:
        msg:
          - "=== MCP Server Synchronization ==="
          - "{{ mcp_sync_result.stdout_lines | default(['No output']) }}"
      when: mcp_sync_result.stdout_lines is defined

    - name: Show available MCP management commands
      debug:
        msg:
          - "=== Available MCP Commands on Target VM ==="
          - "SSH to {{ target_user }}@{{ ansible_host }} and run:"
          - "cd ~/.claude-code-vm/claude-code-mcp-management"
          - "make list                    # List current MCP servers"
          - "make sync                    # Sync all servers from config"
          - "make add SERVERS=name1,name2 # Add specific servers"
          - "make dry-run                 # Preview changes"
          - "make sync CONFIG_FILE=/custom/path.json ENV_FILE=/custom/.env"

  tags:
    - mcp
    - config

- name: Display MCP setup completion
  debug:
    msg:
      - "=== MCP Server Configuration Complete ==="
      - "Deployment location: {{ mcp_management_dir }}"
      - "Environment variables loaded: {{ env_vars.keys() | list | length if env_vars is defined else 0 }}"
      - "Configuration file: ./mcp-servers.json"
      - "Environment file: ./.env"
      - ""
      - "Management commands:"
      - "SSH to {{ ansible_host }} and run:"
      - "cd ~/.claude-code-vm/claude-code-mcp-management"
      - "make list     # List current servers"
      - "make sync     # Sync all servers"
      - "make dry-run  # Preview changes"
      - ""
      - "Next steps:"
      - "1. Claude Code MCP servers are now configured"
      - "2. Use 'make list' to verify installation"
      - "3. Test MCP functionality in Claude Code"
  tags:
    - mcp
    - completion