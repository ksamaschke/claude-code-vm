{
  "_comment": "Claude Code settings template for safe VM operations. Inspired by https://github.com/dwillitzer/claude-settings",
  "permissions": {
    "allow": [
      "// === Basic file operations ===",
      "Read(**)",
      "Edit(**)",
      "MultiEdit(**)",
      "Write(**)",
      "Glob(**)",
      "Grep(**)",
      "LS(**)",
      
      "// === Notebook operations ===",
      "NotebookRead(**)",
      "NotebookEdit(**)",
      
      "// === Task management ===",
      "TodoRead()",
      "TodoWrite(**)",
      "Task(**)",
      
      "// === Web operations (safe domains) ===",
      "WebFetch(domain:docs.anthropic.com)",
      "WebFetch(domain:localhost)",
      "WebFetch(domain:127.0.0.1)",
      "WebFetch(domain:github.com)",
      "WebFetch(domain:gitlab.com)",
      "WebFetch(domain:stackoverflow.com)",
      "WebFetch(domain:developer.mozilla.org)",
      "WebFetch(domain:nodejs.org)",
      "WebFetch(domain:npmjs.com)",
      "WebFetch(domain:pypi.org)",
      "WebFetch(domain:rubygems.org)",
      "WebFetch(domain:docker.com)",
      "WebFetch(domain:kubernetes.io)",
      "WebSearch(**)",
      
      "// === Sequential thinking ===",
      "mcp__sequential-thinking__sequentialthinking(**)",
      
      "// === Context7 operations ===",
      "mcp__Context7__resolve-library-id(**)",
      "mcp__Context7__get-library-docs(**)",
      
      "// === Make operations ===",
      "Bash(make *)",
      "Bash(make clean*)",
      "Bash(make build*)",
      "Bash(make install*)",
      "Bash(make test*)",
      "Bash(make setup*)",
      "Bash(make deploy*)",
      "Bash(make validate*)",
      "Bash(make check*)",
      "Bash(make help*)",
      
      "// === Docker operations ===",
      "Bash(docker ps*)",
      "Bash(docker logs *)",
      "Bash(docker exec * cat *)",
      "Bash(docker exec * ls *)",
      "Bash(docker exec * printenv*)",
      "Bash(docker exec * sh -c *)",
      "Bash(docker exec * bash -c *)",
      "Bash(docker start *)",
      "Bash(docker stop *)",
      "Bash(docker restart *)",
      "Bash(docker rm *)",
      "Bash(docker rm -f *)",
      "Bash(docker inspect *)",
      "Bash(docker volume *)",
      "Bash(docker images*)",
      "Bash(docker pull *)",
      "Bash(docker build *)",
      "Bash(docker tag *)",
      "Bash(docker compose *)",
      "Bash(docker-compose *)",
      "Bash(docker system *)",
      "Bash(docker info*)",
      "Bash(docker version*)",
      "Bash(docker network *)",
      
      "// === Kubernetes operations ===",
      "Bash(kubectl *)",
      "Bash(helm *)",
      "Bash(minikube *)",
      "Bash(kind *)",
      "Bash(k3s *)",
      
      "// === Git operations ===",
      "Bash(git status*)",
      "Bash(git add *)",
      "Bash(git commit *)",
      "Bash(git pull*)",
      "Bash(git fetch*)",
      "Bash(git log*)",
      "Bash(git diff*)",
      "Bash(git checkout *)",
      "Bash(git branch*)",
      "Bash(git merge *)",
      "Bash(git rebase *)",
      "Bash(git stash*)",
      "Bash(git remote *)",
      "Bash(git config *)",
      "Bash(git reset *)",
      "Bash(git clean *)",
      "Bash(git tag *)",
      "Bash(git show *)",
      "Bash(git clone *)",
      "Bash(git init*)",
      
      "// === GitHub CLI ===",
      "Bash(gh *)",
      
      "// === Basic shell commands ===",
      "Bash(ls*)",
      "Bash(cat *)",
      "Bash(less *)",
      "Bash(head *)",
      "Bash(tail *)",
      "Bash(grep *)",
      "Bash(sed *)",
      "Bash(awk *)",
      "Bash(cut *)",
      "Bash(sort *)",
      "Bash(uniq *)",
      "Bash(wc *)",
      "Bash(find *)",
      "Bash(cp *)",
      "Bash(mv *)",
      "Bash(rm *)",
      "Bash(rm -rf ./*)",
      "Bash(rm -rf ./*/*)",
      "Bash(mkdir *)",
      "Bash(rmdir *)",
      "Bash(touch *)",
      "Bash(chmod *)",
      "Bash(chown *)",
      "Bash(diff *)",
      "Bash(tree *)",
      "Bash(pwd*)",
      "Bash(cd *)",
      "Bash(basename *)",
      "Bash(dirname *)",
      "Bash(realpath *)",
      "Bash(readlink *)",
      
      "// === Archive operations ===",
      "Bash(tar *)",
      "Bash(gzip *)",
      "Bash(gunzip *)",
      "Bash(zip *)",
      "Bash(unzip *)",
      
      "// === Network tools (safe usage) ===",
      "Bash(curl *)",
      "Bash(wget *)",
      "Bash(ping *)",
      "Bash(dig *)",
      "Bash(nslookup *)",
      "Bash(host *)",
      "Bash(nc -z *)",
      
      "// === Package managers ===",
      "Bash(npm *)",
      "Bash(npx *)",
      "Bash(node *)",
      "Bash(yarn *)",
      "Bash(pnpm *)",
      "Bash(bun *)",
      "Bash(pip *)",
      "Bash(pip3 *)",
      "Bash(python *)",
      "Bash(python3 *)",
      "Bash(cargo *)",
      "Bash(rustc *)",
      "Bash(go *)",
      "Bash(gem *)",
      "Bash(bundle *)",
      "Bash(ruby *)",
      "Bash(java *)",
      "Bash(javac *)",
      "Bash(mvn *)",
      "Bash(gradle *)",
      "Bash(php *)",
      "Bash(composer *)",
      "Bash(deno *)",
      
      "// === System information ===",
      "Bash(echo *)",
      "Bash(export *)",
      "Bash(env*)",
      "Bash(printenv*)",
      "Bash(source *)",
      "Bash(. *)",
      "Bash(date*)",
      "Bash(whoami*)",
      "Bash(hostname*)",
      "Bash(uname *)",
      "Bash(which *)",
      "Bash(whereis *)",
      "Bash(id*)",
      "Bash(groups*)",
      "Bash(df *)",
      "Bash(du *)",
      "Bash(free*)",
      "Bash(top*)",
      "Bash(htop*)",
      "Bash(ps *)",
      "Bash(pgrep *)",
      "Bash(uptime*)",
      "Bash(history*)",
      "Bash(type *)",
      
      "// === Process management ===",
      "Bash(kill *)",
      "Bash(pkill *)",
      "Bash(killall *)",
      "Bash(jobs*)",
      "Bash(fg*)",
      "Bash(bg*)",
      "Bash(nohup *)",
      "Bash(sleep *)",
      "Bash(wait*)",
      
      "// === Service management ===",
      "Bash(systemctl status *)",
      "Bash(systemctl start *)",
      "Bash(systemctl stop *)",
      "Bash(systemctl restart *)",
      "Bash(journalctl *)",
      
      "// === JSON/YAML processing ===",
      "Bash(jq *)",
      "Bash(yq *)",
      
      "// === Text processing ===",
      "Bash(tr *)",
      "Bash(fold *)",
      "Bash(column *)",
      "Bash(paste *)",
      "Bash(join *)",
      "Bash(split *)",
      "Bash(tee *)",
      "Bash(xargs *)",
      "Bash(printf *)",
      "Bash(test *)",
      "Bash([ *)",
      "Bash([[ *)",
      "Bash(seq *)",
      "Bash(bc *)",
      "Bash(expr *)",
      
      "// === Version managers ===",
      "Bash(nvm *)",
      "Bash(pyenv *)",
      "Bash(rbenv *)",
      "Bash(asdf *)",
      
      "// === Database clients (read operations) ===",
      "Bash(psql -c \"SELECT *)",
      "Bash(mysql -e \"SELECT *)",
      "Bash(sqlite3 * \"SELECT *)",
      "Bash(redis-cli GET *)",
      "Bash(redis-cli HGET *)",
      "Bash(redis-cli LRANGE *)",
      
      "// === SSH operations (IP ranges and specific hosts) ===",
      "Bash(ssh localhost *)",
      "Bash(ssh 127.0.0.1 *)",
      "Bash(ssh 10.0.0.* *)",
      "Bash(ssh 192.168.1.* *)",
      "Bash(ssh 192.168.0.* *)",
      "Bash(ssh * \"ls *)",
      "Bash(ssh * \"cat *)",
      "Bash(ssh * \"grep *)",
      "Bash(ssh * \"docker ps*)",
      "Bash(ssh * \"kubectl get*)",
      "Bash(scp * localhost:*)",
      "Bash(scp localhost:* *)",
      "Bash(scp * 10.0.0.*:*)",
      "Bash(scp * 192.168.1.*:*)",
      "Bash(scp * 192.168.0.*:*)",
      "Bash(scp 10.0.0.*:* *)",
      "Bash(scp 192.168.1.*:* *)",
      "Bash(scp 192.168.0.*:* *)",
      "Bash(rsync -avz *)",
      
      "// === Claude Code operations ===",
      "Bash(claude *)",
      
      "// === Shell control flow ===",
      "Bash(for * in *; do *; done*)",
      "Bash(while *; do *; done*)",
      "Bash(if *; then *; fi*)",
      "Bash(case * in *) *;; esac*)",
      
      "// === Checksum operations ===",
      "Bash(md5sum *)",
      "Bash(sha1sum *)",
      "Bash(sha256sum *)",
      "Bash(sha512sum *)",
      
      "// === Environment-specific operations ===",
      "Bash(cat .env*)",
      "Bash(grep * .env*)",
      "Bash(echo * >> .env*)",
      "Bash(cp .env.example .env*)",
      "Bash(cp .env .env.backup*)",
      
      "// === Ansible operations ===",
      "Bash(ansible *)",
      "Bash(ansible-playbook *)",
      "Bash(ansible-vault *)",
      "Bash(ansible-galaxy *)",
      
      "// === Terraform operations ===",
      "Bash(terraform init*)",
      "Bash(terraform plan*)",
      "Bash(terraform apply*)",
      "Bash(terraform destroy*)",
      "Bash(terraform fmt*)",
      "Bash(terraform validate*)",
      
      "// === Testing frameworks ===",
      "Bash(jest *)",
      "Bash(pytest *)",
      "Bash(rspec *)",
      "Bash(go test *)",
      "Bash(cargo test *)",
      
      "// === File information ===",
      "Bash(stat *)",
      "Bash(file *)",
      
      "// === Port checking ===",
      "Bash(lsof -i :*)",
      "Bash(netstat -an | grep *)",
      "Bash(ss -an | grep *)",
      
      "// === Log viewing ===",
      "Bash(tail -f *.log*)",
      "Bash(grep -i error logs/*)",
      "Bash(grep -i warn logs/*)",
      
      "// === Pipe operations ===",
      "Bash(* | *)",
      "Bash(* > *)",
      "Bash(* >> *)",
      "Bash(* 2>&1*)",
      "Bash(* < *)",
      "Bash(* && *)",
      "Bash(* || *)",
      "Bash(* ; *)"
    ],
    "deny": [
      "// === Destructive file operations ===",
      "Bash(rm -rf /*)",
      "Bash(rm -rf /)",
      "Bash(sudo rm -rf /*)",
      "Bash(sudo rm -rf /)",
      "Bash(rm -rf /etc/*)",
      "Bash(rm -rf /bin/*)",
      "Bash(rm -rf /usr/*)",
      "Bash(rm -rf /home/*)",
      "Bash(rm -rf /var/*)",
      "Bash(rm -rf /opt/*)",
      
      "// === Disk operations ===",
      "Bash(dd if=/dev/zero of=/dev/*)",
      "Bash(dd if=/dev/random of=/dev/*)",
      "Bash(mkfs*)",
      "Bash(fdisk*)",
      "Bash(parted*)",
      "Bash(> /dev/sda*)",
      "Bash(> /dev/nvme*)",
      "Bash(> /dev/sd*)",
      
      "// === Fork bombs ===",
      "Bash(:(){ :|:& };:*)",
      "Bash(*fork*bomb*)",
      
      "// === Reverse shells ===",
      "Bash(* | nc -l*)",
      "Bash(* | netcat -l*)",
      "Bash(* | socat *)",
      "Bash(bash -i >& /dev/tcp/*)",
      "Bash(sh -i >& /dev/tcp/*)",
      "Bash(exec < /dev/tcp/*)",
      "Bash(exec > /dev/tcp/*)",
      
      "// === Remote execution ===",
      "Bash(* | base64 -d | sh*)",
      "Bash(* | base64 -d | bash*)",
      "Bash(curl * | sh*)",
      "Bash(curl * | bash*)",
      "Bash(wget * | sh*)",
      "Bash(wget * | bash*)",
      "Bash(curl * | sudo *)",
      "Bash(wget * | sudo *)",
      
      "// === User/permission modifications ===",
      "Bash(sudo passwd*)",
      "Bash(passwd*)",
      "Bash(sudo useradd*)",
      "Bash(sudo userdel*)",
      "Bash(sudo usermod*)",
      "Bash(sudo adduser*)",
      "Bash(sudo deluser*)",
      "Bash(sudo chmod 777 /*)",
      "Bash(sudo chown * /*)",
      "Bash(chmod -R 777 /*)",
      "Bash(chmod 777 /etc/*)",
      "Bash(chown -R * /*)",
      
      "// === System shutdown ===",
      "Bash(shutdown*)",
      "Bash(reboot*)",
      "Bash(halt*)",
      "Bash(poweroff*)",
      "Bash(init 0*)",
      "Bash(init 6*)",
      
      "// === Firewall/security disabling ===",
      "Bash(sudo ufw disable*)",
      "Bash(sudo iptables -F*)",
      "Bash(sudo iptables --flush*)",
      "Bash(sudo systemctl stop firewalld*)",
      "Bash(sudo service iptables stop*)",
      
      "// === Crypto mining ===",
      "Bash(*xmrig*)",
      "Bash(*monero*)",
      "Bash(*bitcoin*miner*)",
      "Bash(*crypto*miner*)",
      
      "// === Force push/destructive git ===",
      "Bash(git push --force origin master*)",
      "Bash(git push --force origin main*)",
      "Bash(git push -f origin master*)",
      "Bash(git push -f origin main*)",
      
      "// === Credential exposure ===",
      "Bash(cat ~/.aws/*)",
      "Bash(cat ~/.ssh/id_*)",
      "Bash(cat /root/.ssh/*)",
      "Bash(env | base64*)",
      "Bash(printenv | base64*)",
      "Bash(history | grep -i password*)",
      "Bash(history | grep -i token*)",
      "Bash(history | grep -i secret*)",
      "Bash(find / -name id_rsa*)",
      "Bash(find / -name *.key*)",
      "Bash(find / -name *.pem*)",
      
      "// === Privileged Docker ===",
      "Bash(docker run --privileged *)",
      "Bash(docker run --pid=host *)",
      "Bash(docker run --net=host *)",
      "Bash(docker run -v /:/host *)",
      "Bash(docker run -v /etc:/etc *)",
      "Bash(docker run -v /var/run/docker.sock:/var/run/docker.sock *)",
      
      "// === Log deletion ===",
      "Bash(rm /var/log/*)",
      "Bash(rm -rf /var/log/*)",
      "Bash(> /var/log/*)",
      "Bash(truncate -s 0 /var/log/*)",
      
      "// === Kernel/system modifications ===",
      "Bash(insmod *)",
      "Bash(rmmod *)",
      "Bash(modprobe *)",
      "Bash(sysctl -w *)",
      
      "// === Network scanning ===",
      "Bash(nmap*)",
      "Bash(masscan*)",
      
      "// === Privilege escalation ===",
      "Bash(sudo -l*)",
      "Bash(sudo su*)",
      "Bash(sudo -i*)",
      "Bash(pkexec *)",
      
      "// === Path hijacking ===",
      "Bash(export PATH=*)",
      "Bash(export LD_LIBRARY_PATH=*)",
      "Bash(export PYTHONPATH=*)",
      "Bash(LD_PRELOAD=*)",
      
      "// === Service disabling ===",
      "Bash(systemctl mask *)",
      "Bash(systemctl disable *)",
      "Bash(systemctl daemon-reload*)",
      
      "// === Cloud metadata access ===",
      "Bash(curl http://169.254.169.254/*)",
      "Bash(wget http://169.254.169.254/*)",
      "Bash(curl http://metadata.google.internal/*)",
      
      "// === Package installation with dangerous flags ===",
      "Bash(npm install -g * --unsafe-perm*)",
      "Bash(pip install * --break-system-packages*)",
      "Bash(gem install * --no-user-install*)",
      
      "// === Database destructive operations ===",
      "Bash(psql -c \"DROP *)",
      "Bash(psql -c \"DELETE *)",
      "Bash(psql -c \"TRUNCATE *)",
      "Bash(mysql -e \"DROP *)",
      "Bash(mysql -e \"DELETE *)",
      "Bash(mysql -e \"TRUNCATE *)",
      
      "// === Docker push (prevent accidental exposure) ===",
      "Bash(docker push *)",
      
      "// === Debugging tools that could be misused ===",
      "Bash(gdb -p *)",
      "Bash(strace -p *)",
      "Bash(ptrace *)",
      
      "// === Find and delete operations ===",
      "Bash(find / -type f -delete*)",
      "Bash(find / -type d -delete*)"
    ]
  }
}