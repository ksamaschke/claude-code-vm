# =============================================================================
# Git Repository Management Configuration Template
# =============================================================================
# Copy this file to .git-repos.env or extend your existing .env file
# 
# Usage: 
#   Option 1: cp config/git-repos.env.example .git-repos.env
#   Option 2: Append contents to your existing .env file
#   
#   Then: make deploy VM_HOST=your.ip TARGET_USER=username GIT_CONFIG_FILE=.git-repos.env
#   Or:   make deploy VM_HOST=your.ip TARGET_USER=username  # uses .env by default
#
# =============================================================================

# =============================================================================
# Git Server Configuration (Required - at least one)
# =============================================================================

# Well-known providers (URL is automatic)
# GitHub.com - always uses https://github.com
GITHUB_USERNAME="yourusername"
GITHUB_PAT="ghp_xxxxxxxxxxxxxxxxxxxx"

# GitLab.com - always uses https://gitlab.com  
# GITLAB_USERNAME="yourusername"
# GITLAB_PAT="glpat-xxxxxxxxxxxxxxxxxxxx"

# Custom/Self-hosted Git servers (URL required)
# Pattern: GIT_{NAME}_{FIELD} where NAME is your choice

# Example: Company GitLab
# GIT_COMPANY_URL="https://gitlab.company.com"
# GIT_COMPANY_USERNAME="yourusername"
# GIT_COMPANY_PAT="glpat-xxxxxxxxxxxxxxxxxxxx"

# =============================================================================
# Git User Configuration (Required for commits)
# =============================================================================
# These will be set globally on the target system
GIT_USER_NAME="Your Name"
GIT_USER_EMAIL="your.email@example.com"

# =============================================================================
# Repository Management Configuration
# =============================================================================

# Base directory for all cloned repositories (default: ~/projects)
# GIT_REPOS_BASE_DIR="~/projects"

# Global default branch (used if no per-repo branch specified)
# Leave empty to use repository default (main/master)
# GIT_DEFAULT_BRANCH=""

# =============================================================================
# Repository List Configuration
# =============================================================================
# Support for both single repository and multiple repository configurations:
#
# SINGLE REPOSITORY FORMAT (for single repository):
#   GIT_REPO_URL - The git clone URL
#   GIT_REPO_BRANCH - Branch to checkout (optional)
#   GIT_REPO_DIR - Custom directory name (optional)
#   GIT_REPO_DEPTH - Clone depth (optional)
#
# NUMBERED REPOSITORY FORMAT (for multiple repositories):
#   Format: GIT_REPO_{NUMBER}_{FIELD}
# 
# Required fields per repository:
#   - URL: The full git clone URL
# 
# Optional fields per repository:
#   - BRANCH: Specific branch to checkout (overrides GIT_DEFAULT_BRANCH)
#   - DIR: Custom directory name (defaults to repo name from URL)
#   - DEPTH: Clone depth for shallow clones (default: full clone)
#
# Examples:

# Single repository format (simple format for single repos)
# GIT_REPO_URL="https://github.com/yourusername/your-project.git"
# GIT_REPO_BRANCH="main"

# Numbered repository format (for multiple repos)
# Repository 1: Simple clone with default branch
GIT_REPO_1_URL="https://github.com/yourusername/your-project.git"

# Repository 2: Clone specific branch
# GIT_REPO_2_URL="https://github.com/yourusername/another-project.git"
# GIT_REPO_2_BRANCH="develop"

# Repository 3: Clone to custom directory with shallow clone
# GIT_REPO_3_URL="https://gitlab.com/yourgroup/large-project.git"
# GIT_REPO_3_DIR="custom-name"
# GIT_REPO_3_BRANCH="feature/new-feature"
# GIT_REPO_3_DEPTH="1"

# Repository 4: Private repository using configured credentials
# GIT_REPO_4_URL="https://github.com/yourorg/private-repo.git"
# GIT_REPO_4_BRANCH="main"

# Repository 5: Self-hosted Git server (must match GIT_COMPANY_* config above)
# GIT_REPO_5_URL="https://gitlab.company.com/team/internal-project.git"
# GIT_REPO_5_BRANCH="production"

# =============================================================================
# Repository Management Options
# =============================================================================

# Update existing repositories on subsequent runs (default: true)
# Set to false to only clone missing repositories
# GIT_UPDATE_EXISTING="true"

# Create standard development directories structure (default: true)
# Creates: docs, tests, scripts, config directories if they don't exist
# GIT_CREATE_DEV_STRUCTURE="true"

# Set up Git hooks directory (default: false)
# Creates .githooks directory and configures Git to use it
# GIT_SETUP_HOOKS="false"

# =============================================================================
# Advanced Repository Configuration
# =============================================================================

# Git configuration per repository (applied after clone)
# Format: GIT_REPO_{NUMBER}_CONFIG_{KEY}="value"
# 
# Example: Set different user config for work repositories
# GIT_REPO_2_CONFIG_USER_NAME="Work Name"
# GIT_REPO_2_CONFIG_USER_EMAIL="work.email@company.com"

# Git remote configuration
# Format: GIT_REPO_{NUMBER}_REMOTE_{NAME}="url"
# 
# Example: Add upstream remote
# GIT_REPO_1_REMOTE_UPSTREAM="https://github.com/original/upstream-repo.git"

# Post-clone commands (executed in repository directory)
# Format: GIT_REPO_{NUMBER}_POST_CLONE="command"
# 
# Example: Install dependencies after clone
# GIT_REPO_1_POST_CLONE="npm install"
# GIT_REPO_2_POST_CLONE="pip install -r requirements.txt"
# GIT_REPO_3_POST_CLONE="echo 'Repository cloned successfully' && npm install"

# =============================================================================
# MCP Server API Keys (Optional - if using same file as main .env)
# =============================================================================
# BRAVE_API_KEY=""
# UPSTASH_REDIS_REST_URL="https://your-redis-url.upstash.io"
# UPSTASH_REDIS_REST_TOKEN="your_redis_token"

# =============================================================================
# Security Notes
# =============================================================================
# 1. Never commit this file with real credentials
# 2. Use Personal Access Tokens (PATs) instead of passwords
# 3. Set minimal required permissions for PATs (typically: repo, read:user)
# 4. Rotate PATs regularly
# 5. Consider using a password manager for credential storage
# 6. Repository URLs with credentials will be sanitized in logs